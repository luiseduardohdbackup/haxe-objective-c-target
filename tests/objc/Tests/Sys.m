//
//  Sys
//  Tests
//
//  Source generated by Haxe Objective-C target
//

#import "Sys.h"

@implementation Sys

+ (void) print:(id)v{
	print(v);
}
+ (void) println:(id)v{
	[Sys print:v];
	[Sys print:(NSMutableString*)@"\n"];
}
+ (Input*) stdin{
	return [[FileInput alloc] init:[file_stdin]];
}
+ (Output*) stdout{
	return [[FileOutput alloc] init:[file_stdout]];
}
+ (Output*) stderr{
	return [[FileOutput alloc] init:[file_stderr]];
}
+ (int) getChar:(BOOL)echo{
	return 0;
}
+ (NSMutableArray*) args{
	return nil;
}
+ (NSMutableString*) getEnv:(NSMutableString*)s{
	
	NSMutableString *v = nil;
	if (v == nil) return nil;
	return v;
}
+ (void) putEnv:(NSMutableString*)s v:(NSMutableString*)v{
}
+ (void) sleep:(float)seconds{
}
+ (BOOL) setTimeLocale:(NSMutableString*)loc{
	return YES;
}
+ (NSMutableString*) getCwd{
	return nil;
}
+ (void) setCwd:(NSMutableString*)s{
}
+ (NSMutableString*) systemName{
	return nil;
}
+ (NSMutableString*) escapeArgument:(NSMutableString*)arg{
	BOOL ok = YES;
	{
		int _g1 = 0; int _g = arg.length;
		while (_g1 < _g) {
			int i = _g1++;
			int _g2 = [arg characterAtIndex:i];
			switch (_g2){
				case 32:{
					ok = NO}break;
				case 34:{
					ok = NO}break;
				case 0:{
					arg = [arg substringWithRange:0 len:i]}break;
				case 13:{
					arg = [arg substringWithRange:0 len:i]}break;
				case 10:{
					arg = [arg substringWithRange:0 len:i]}break;
			}
		}
	}
	if (ok) return arg;
	return [[(NSMutableString*)@"\"" stringByAppendingString:[[arg componentsSeparatedByString:(NSMutableString*)@"\""] join:(NSMutableString*)@"\\\""]] stringByAppendingString:(NSMutableString*)@"\""];
}
+ (int) command:(NSMutableString*)cmd args:(NSMutableArray*)args{
	// Simulated optional arguments
	if (args == nil) args = nil;
	
	if (args != nil) {
		cmd = [Sys escapeArgument:cmd];
		{
			int _g = 0;
			while (_g < args.length) {
				
				NSMutableString *a = [args objectAtIndex:_g];
				++_g;
				[cmd appendString:[(NSMutableString*)@" " stringByAppendingString:[Sys escapeArgument:a]]];
			}
		}
	}
	return 0;
}
+ (void) exit:(int)code{
	exit(code);
}
+ (float) time{
	return 0;
}
+ (float) cpuTime{
	return 0;
}
+ (NSMutableString*) executablePath{
	return nil;
}
+ (Hash*) environment{
	
	NSMutableArray *vars = nil;
	
	Hash *result = [[Hash alloc] init];
	int i = 0;
	while (i < vars.length) {
		[result set:[vars objectAtIndex:i] value:[vars objectAtIndex:i + 1]];
		i += 2;
	}
	return result;
}

@end
