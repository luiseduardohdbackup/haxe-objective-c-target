//
//  FastList
//  Tests
//
//  Source generated by Haxe Objective-C target
//

#import "FastList.h"

@implementation FastCell

@synthesize elt;
@synthesize next;
id(^block_init)(id elt, FastCell *next) = ^(id elt, FastCell *next) { [me init:elt next:next]; };
- (id) init:(id)elt next:(FastCell*)next{
	self = [super init];
	me = self;
	self.elt = elt;
	self.next = next;
	return self;
}

@end

@implementation FastList

@synthesize head;
void(^block_add)(id item) = ^(id item) { [me add:item]; };
- (void) add:(id)item{
	self.head = [[FastCell alloc] init:item next:block_head];
}
id(^block_first)() = ^() { [me first]; };
- (id) first{
	return ( (self.head == nil) ? nil : self.head.elt);
}
id(^block_pop)() = ^() { [me pop]; };
- (id) pop{
	
	FastCell *k = self.head;
	if (k == nil) return nil;
	else {
		self.head = block_next;
		return k.elt;
	}
	return nil;
}
BOOL(^block_isEmpty)() = ^() { [me isEmpty]; };
- (BOOL) isEmpty{
	return self.head == nil;
}
BOOL(^block_remove)(id v) = ^(id v) { [me remove:v]; };
- (BOOL) remove:(id)v{
	id prev = nil;
	
	FastCell *l = self.head;
	while (l != nil) {
		if (l.elt == v) {
			if (prev == nil) self.head = block_next;
			else prev next = block_next;
			break;
		}
		prev = l;
		l = block_next;
	}
	return l != nil;
}
id(^block_iterator)() = ^() { [me iterator]; };
- (id) iterator{
	
	NSMutableArray *l = [[NSMutableArray alloc] initWithObjects:self.head, nil];
	return struct {
	hasNext:^BOOL(^block_)() = ^() { [me ]; };
- (BOOL) {
		return [l objectAtIndex:0] != nil;
	}; next:^id(^block_)() = ^() { [me ]; };
- (id) {
		
		FastCell *k = [l objectAtIndex:0];
		[l objectAtIndex:0] = block_next;
		return k.elt;
	}
	} structName;
}
NSMutableString*(^block_toString)() = ^() { [me toString]; };
- (NSMutableString*) toString{
	
	NSMutableArray *a = (NSMutableArray*)[[NSMutableArray alloc] init];
	
	FastCell *l = self.head;
	while (l != nil) {
		[a push:l elt];
		l = block_next;
	}
	return [[(NSMutableString*)@"{" stringByAppendingString:[a join:(NSMutableString*)@","]] stringByAppendingString:(NSMutableString*)@"}"];
}
id(^block_init)() = ^() { [me init]; };
- (id) init{
	self = [super init];
	me = self;
	return self;
}

@end
