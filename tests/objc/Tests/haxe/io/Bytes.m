//
//  Bytes
//  Tests
//
//  Source generated by Haxe Objective-C target
//

#import "Bytes.h"

@implementation Bytes

Bytes*(^block_alloc)(int length) = ^(int length) { [me alloc:length]; };
+ (Bytes*) alloc:(int)length{
	
	NSMutableArray *a = (NSMutableArray*)[[NSMutableArray alloc] init];
	{
		int _g = 0;
		while (_g < length) {
			int i = _g++;
			[a push:0];
		}
	}
	return [[Bytes alloc] init:length b:a];
}
Bytes*(^block_ofString)(NSMutableString *s) = ^(NSMutableString *s) { [me ofString:s]; };
+ (Bytes*) ofString:(NSMutableString*)s{
	
	NSMutableArray *a = (NSMutableArray*)[[NSMutableArray alloc] init];
	{
		int _g1 = 0; int _g = s.length;
		while (_g1 < _g) {
			int i = _g1++;
			int c = [s characterAtIndex:i];
			if (c <= 127) [a push:c];
			else if (c <= 2047) {
				[a push:192 | c >> 6];
				[a push:128 | (c & 63)];
			}
			else if (c <= 65535) {
				[a push:224 | c >> 12];
				[a push:128 | (c >> 6 & 63)];
				[a push:128 | (c & 63)];
			}
			else {
				[a push:240 | c >> 18];
				[a push:128 | (c >> 12 & 63)];
				[a push:128 | (c >> 6 & 63)];
				[a push:128 | (c & 63)];
			}
		}
	}
	return [[Bytes alloc] init:a length b:a];
}
Bytes*(^block_ofData)(NSMutableArray *b) = ^(NSMutableArray *b) { [me ofData:b]; };
+ (Bytes*) ofData:(NSMutableArray*)b{
	return [[Bytes alloc] init:b length b:b];
}
int(^block_fastGet)(NSMutableArray *b, int pos) = ^(NSMutableArray *b, int pos) { [me fastGet:b pos:pos]; };
+ (int) fastGet:(NSMutableArray*)b pos:(int)pos{
	return [b objectAtIndex:pos];
}
@synthesize length;
@synthesize b;
int(^block_get)(int pos) = ^(int pos) { [me get:pos]; };
- (int) get:(int)pos{
	return [self.b objectAtIndex:pos];
}
void(^block_set)(int pos, int v) = ^(int pos, int v) { [me set:pos v:v]; };
- (void) set:(int)pos v:(int)v{
	[self.b objectAtIndex:pos] = (v & 255);
}
void(^block_blit)(int pos, Bytes *src, int srcpos, int len) = ^(int pos, Bytes *src, int srcpos, int len) { [me blit:pos src:src srcpos:srcpos len:len]; };
- (void) blit:(int)pos src:(Bytes*)src srcpos:(int)srcpos len:(int)len{
	if (pos < 0 || srcpos < 0 || len < 0 || pos + len > block_length || srcpos + len > block_length) @throw Error OutsideBounds;;
	
	NSMutableArray *b1 = (NSMutableArray*)self.b;
	
	NSMutableArray *b2 = (NSMutableArray*)src.b;
	if (b1 == b2 && pos > srcpos) {
		int i = len;
		while (i > 0) {
			i--;
			[b1 objectAtIndex:i + pos] = [b2 objectAtIndex:i + srcpos];
		}
		return;
	}
	{
		int _g = 0;
		while (_g < len) {
			int i = _g++;
			[b1 objectAtIndex:i + pos] = [b2 objectAtIndex:i + srcpos];
		}
	}
}
Bytes*(^block_sub)(int pos, int len) = ^(int pos, int len) { [me sub:pos len:len]; };
- (Bytes*) sub:(int)pos len:(int)len{
	if (pos < 0 || len < 0 || pos + len > block_length) @throw Error OutsideBounds;;
	return [[Bytes alloc] init:len b:[self b slice:pos end:pos + len]];
}
int(^block_compare)(Bytes *other) = ^(Bytes *other) { [me compare:other]; };
- (int) compare:(Bytes*)other{
	
	NSMutableArray *b1 = (NSMutableArray*)self.b;
	
	NSMutableArray *b2 = (NSMutableArray*)other.b;
	int len = ( (self.length < block_length) ? self.length : other.length);
	{
		int _g = 0;
		while (_g < (int)len) {
			int i = _g++;
			if ([b1 objectAtIndex:i] != [b2 objectAtIndex:i]) return [b1 objectAtIndex:i] - [b2 objectAtIndex:i];
		}
	}
	return self.length - block_length;
}
NSMutableString*(^block_readString)(int pos, int len) = ^(int pos, int len) { [me readString:pos len:len]; };
- (NSMutableString*) readString:(int)pos len:(int)len{
	if (pos < 0 || len < 0 || pos + len > block_length) @throw Error OutsideBounds;;
	
	NSMutableString *s = (NSMutableString*)@"";
	
	NSMutableArray *b = (NSMutableArray*)self.b;
	SEL fcc = NSMutableString fromCharCode;
	int i = pos;
	int max = pos + len;
	while (i < max) {
		int c = [b objectAtIndex:i++];
		if (c < 128) {
			if (c == 0) break;
			[s appendString:[fcc:c]];
		}
		else if (c < 224) [s appendString:[fcc: (c & @"63") << @"6" | ([b objectAtIndex:i++] & @"127")]];
		else if (c < 240) {
			int c2 = [b objectAtIndex:i++];
			[s appendString:[fcc:( (c & @"31") << @"12" |  (c2 & @"127") << @"6") | ([b objectAtIndex:i++] & @"127")]];
		}
		else {
			int c2 = [b objectAtIndex:i++];
			int c3 = [b objectAtIndex:i++];
			[s appendString:[fcc:(( (c & @"15") << @"18" |  (c2 & @"127") << @"12") | (c3 << @"6" & @"127")) | ([b objectAtIndex:i++] & @"127")]];
		}
	}
	return s;
}
NSMutableString*(^block_toString)() = ^() { [me toString]; };
- (NSMutableString*) toString{
	return [self readString:0 len:self length];
}
NSMutableString*(^block_toHex)() = ^() { [me toHex]; };
- (NSMutableString*) toHex{
	
	StringBuf *s = [[StringBuf alloc] init];
	
	NSMutableArray *chars = [[NSMutableArray alloc] initWithObjects:, nil];
	
	NSMutableString *str = (NSMutableString*)@"0123456789abcdef";
	{
		int _g1 = 0; int _g = str.length;
		while (_g1 < _g) {
			int i = _g1++;
			[chars push:[str characterAtIndex:i]];
		}
	}
	{
		int _g1 = 0; int _g = self.length;
		while (_g1 < _g) {
			int i = _g1++;
			int c = [self.b objectAtIndex:i];
			s.b += [block_fromCharCode:[chars objectAtIndex:c >> 4]];
			s.b += [block_fromCharCode:[chars objectAtIndex:c & 15]];
		}
	}
	return s.b;
}
NSMutableArray*(^block_getData)() = ^() { [me getData]; };
- (NSMutableArray*) getData{
	return self.b;
}
id(^block_init)(int length, NSMutableArray *b) = ^(int length, NSMutableArray *b) { [me init:length b:b]; };
- (id) init:(int)length b:(NSMutableArray*)b{
	self = [super init];
	me = self;
	self.length = length;
	self.b = b;
	return self;
}

@end
