//
//  Md5
//  Tests
//
//  Source generated by Haxe Objective-C target
//

#import "Md5.h"

@implementation Md5

NSMutableString*(^block_encode)(NSMutableString *s) = ^(NSMutableString *s) { [me encode:s]; };
+ (NSMutableString*) encode:(NSMutableString*)s{
	const char *cStr = [input UTF8String];
	unsigned char digest[16];
	CC_MD5( cStr, strlen(cStr), digest ); // This is the md5 call
	NSMutableString *output = [NSMutableString stringWithCapacity:CC_MD5_DIGEST_LENGTH * 2];
	for (int i = 0; i < CC_MD5_DIGEST_LENGTH; i++) [output appendFormat:@"%02x", digest[i]];;
	return output;
}
Bytes*(^block_make)(Bytes *b) = ^(Bytes *b) { [me make:b]; };
+ (Bytes*) make:(Bytes*)b{
	
	NSMutableArray *h = (NSMutableArray*)[[[Md5 alloc] init] doEncode:[Md5 bytes2blks:b]];
	
	Bytes *_out = [Bytes alloc:16];
	int p = 0;
	{
		int _g = 0;
		while (_g < 4) {
			int i = _g++;
			[_out.b objectAtIndex:p++] = (([h objectAtIndex:i] & 255) & 255);
			[_out.b objectAtIndex:p++] = (([h objectAtIndex:i] >> 8 & 255) & 255);
			[_out.b objectAtIndex:p++] = (([h objectAtIndex:i] >> 16 & 255) & 255);
			[_out.b objectAtIndex:p++] = ([h objectAtIndex:i] >>> 24 & 255);
		}
	}
	return _out;
}
NSMutableArray*(^block_bytes2blks)(Bytes *b) = ^(Bytes *b) { [me bytes2blks:b]; };
+ (NSMutableArray*) bytes2blks:(Bytes*)b{
	int nblk =  (b.length + 8 >> 6) + 1;
	
	NSMutableArray *blks = (NSMutableArray*)[[NSMutableArray alloc] init];
	int blksSize = nblk * 16;
	{
		int _g = 0;
		while (_g < (int)blksSize) {
			int i = _g++;
			[blks objectAtIndex:i] = 0;
		}
	}
	int i = 0;
	while (i < block_length) {
		[blks objectAtIndex:i >> 2] |= [block_b objectAtIndex:i] <<  ( ( (block_length << 3) + i & 3) << 3);
		i++;
	}
	[blks objectAtIndex:i >> 2] |= 128 <<  (block_length * 8 + i) % 4 * 8;
	int l = b.length * 8;
	int k = nblk * 16 - 2;
	[blks objectAtIndex:k] = (l & 255);
	[blks objectAtIndex:k] |=  (l >>> 8 & 255) << 8;
	[blks objectAtIndex:k] |=  (l >>> 16 & 255) << 16;
	[blks objectAtIndex:k] |=  (l >>> 24 & 255) << 24;
	return blks;
}
NSMutableArray*(^block_str2blks)(NSMutableString *str) = ^(NSMutableString *str) { [me str2blks:str]; };
+ (NSMutableArray*) str2blks:(NSMutableString*)str{
	int nblk =  (str.length + 8 >> 6) + 1;
	
	NSMutableArray *blks = (NSMutableArray*)[[NSMutableArray alloc] init];
	int blksSize = nblk * 16;
	{
		int _g = 0;
		while (_g < (int)blksSize) {
			int i = _g++;
			[blks objectAtIndex:i] = 0;
		}
	}
	int i = 0;
	while (i < block_length) {
		[blks objectAtIndex:i >> 2] |= [block_charCodeAt:i] <<  (block_length * 8 + i) % 4 * 8;
		i++;
	}
	[blks objectAtIndex:i >> 2] |= 128 <<  (block_length * 8 + i) % 4 * 8;
	int l = str.length * 8;
	int k = nblk * 16 - 2;
	[blks objectAtIndex:k] = (l & 255);
	[blks objectAtIndex:k] |=  (l >>> 8 & 255) << 8;
	[blks objectAtIndex:k] |=  (l >>> 16 & 255) << 16;
	[blks objectAtIndex:k] |=  (l >>> 24 & 255) << 24;
	return blks;
}
int(^block_bitOR)(int a, int b) = ^(int a, int b) { [me bitOR:a b:b]; };
- (int) bitOR:(int)a b:(int)b{
	int lsb = (a & 1) | (b & 1);
	int msb31 = a >>> 1 | b >>> 1;
	return msb31 << 1 | lsb;
}
int(^block_bitXOR)(int a, int b) = ^(int a, int b) { [me bitXOR:a b:b]; };
- (int) bitXOR:(int)a b:(int)b{
	int lsb = (a & 1) ^ (b & 1);
	int msb31 = a >>> 1 ^ b >>> 1;
	return msb31 << 1 | lsb;
}
int(^block_bitAND)(int a, int b) = ^(int a, int b) { [me bitAND:a b:b]; };
- (int) bitAND:(int)a b:(int)b{
	int lsb = (a & 1) &  (b & 1);
	int msb31 = a >>> 1 & b >>> 1;
	return msb31 << 1 | lsb;
}
int(^block_addme)(int x, int y) = ^(int x, int y) { [me addme:x y:y]; };
- (int) addme:(int)x y:(int)y{
	int lsw =  (x & 65535) +  (y & 65535);
	int msw =  (x >> 16) +  (y >> 16) +  (lsw >> 16);
	return msw << 16 | (lsw & 65535);
}
NSMutableString*(^block_hex)(NSMutableArray *a) = ^(NSMutableArray *a) { [me hex:a]; };
- (NSMutableString*) hex:(NSMutableArray*)a{
	
	NSMutableString *str = (NSMutableString*)@"";
	
	NSMutableString *hex_chr = (NSMutableString*)@"0123456789abcdef";
	{
		int _g = 0;
		while (_g < block_length) {
			int num = [a objectAtIndex:_g];
			++_g;
			int _g1 = 0;
			while (_g1 < 4) {
				int j = _g1++;
				[str appendString:[[hex_chr characterAtIndex:num >> j * @"8" + @"4" & @"15"] stringByAppendingString:[hex_chr characterAtIndex:num >> j * @"8" & @"15"]]];
			}
		}
	}
	return str;
}
int(^block_rol)(int num, int cnt) = ^(int num, int cnt) { [me rol:num cnt:cnt]; };
- (int) rol:(int)num cnt:(int)cnt{
	return num << cnt | num >>> 32 - cnt;
}
int(^block_cmn)(int q, int a, int b, int x, int s, int t) = ^(int q, int a, int b, int x, int s, int t) { [me cmn:q a:a b:b x:x s:s t:t]; };
- (int) cmn:(int)q a:(int)a b:(int)b x:(int)x s:(int)s t:(int)t{
	return [self addme:[self rol:[self addme:[self addme:a y:q] y:[self addme:x y:t]] cnt:s] y:b];
}
int(^block_ff)(int a, int b, int c, int d, int x, int s, int t) = ^(int a, int b, int c, int d, int x, int s, int t) { [me ff:a b:b c:c d:d x:x s:s t:t]; };
- (int) ff:(int)a b:(int)b c:(int)c d:(int)d x:(int)x s:(int)s t:(int)t{
	return [self cmn:[self bitOR:[self bitAND:b b:c] b:[self bitAND:~b b:d]] a:a b:b x:x s:s t:t];
}
int(^block_gg)(int a, int b, int c, int d, int x, int s, int t) = ^(int a, int b, int c, int d, int x, int s, int t) { [me gg:a b:b c:c d:d x:x s:s t:t]; };
- (int) gg:(int)a b:(int)b c:(int)c d:(int)d x:(int)x s:(int)s t:(int)t{
	return [self cmn:[self bitOR:[self bitAND:b b:d] b:[self bitAND:c b:~d]] a:a b:b x:x s:s t:t];
}
int(^block_hh)(int a, int b, int c, int d, int x, int s, int t) = ^(int a, int b, int c, int d, int x, int s, int t) { [me hh:a b:b c:c d:d x:x s:s t:t]; };
- (int) hh:(int)a b:(int)b c:(int)c d:(int)d x:(int)x s:(int)s t:(int)t{
	return [self cmn:[self bitXOR:[self bitXOR:b b:c] b:d] a:a b:b x:x s:s t:t];
}
int(^block_ii)(int a, int b, int c, int d, int x, int s, int t) = ^(int a, int b, int c, int d, int x, int s, int t) { [me ii:a b:b c:c d:d x:x s:s t:t]; };
- (int) ii:(int)a b:(int)b c:(int)c d:(int)d x:(int)x s:(int)s t:(int)t{
	return [self cmn:[self bitXOR:c b:[self bitOR:b b:~d]] a:a b:b x:x s:s t:t];
}
NSMutableArray*(^block_doEncode)(NSMutableArray *x) = ^(NSMutableArray *x) { [me doEncode:x]; };
- (NSMutableArray*) doEncode:(NSMutableArray*)x{
	int a = 1732584193;
	int b = -271733879;
	int c = -1732584194;
	int d = 271733878;
	int step;
	int i = 0;
	while (i < block_length) {
		int olda = a;
		int oldb = b;
		int oldc = c;
		int oldd = d;
		step = 0;
		a = [block_ff:a b:b c:c d:d x:[x objectAtIndex:i] s:7 t:-680876936];
		d = [block_ff:d b:a c:b d:c x:[x objectAtIndex:i + 1] s:12 t:-389564586];
		c = [block_ff:c b:d c:a d:b x:[x objectAtIndex:i + 2] s:17 t:606105819];
		b = [block_ff:b b:c c:d d:a x:[x objectAtIndex:i + 3] s:22 t:-1044525330];
		a = [block_ff:a b:b c:c d:d x:[x objectAtIndex:i + 4] s:7 t:-176418897];
		d = [block_ff:d b:a c:b d:c x:[x objectAtIndex:i + 5] s:12 t:1200080426];
		c = [block_ff:c b:d c:a d:b x:[x objectAtIndex:i + 6] s:17 t:-1473231341];
		b = [block_ff:b b:c c:d d:a x:[x objectAtIndex:i + 7] s:22 t:-45705983];
		a = [block_ff:a b:b c:c d:d x:[x objectAtIndex:i + 8] s:7 t:1770035416];
		d = [block_ff:d b:a c:b d:c x:[x objectAtIndex:i + 9] s:12 t:-1958414417];
		c = [block_ff:c b:d c:a d:b x:[x objectAtIndex:i + 10] s:17 t:-42063];
		b = [block_ff:b b:c c:d d:a x:[x objectAtIndex:i + 11] s:22 t:-1990404162];
		a = [block_ff:a b:b c:c d:d x:[x objectAtIndex:i + 12] s:7 t:1804603682];
		d = [block_ff:d b:a c:b d:c x:[x objectAtIndex:i + 13] s:12 t:-40341101];
		c = [block_ff:c b:d c:a d:b x:[x objectAtIndex:i + 14] s:17 t:-1502002290];
		b = [block_ff:b b:c c:d d:a x:[x objectAtIndex:i + 15] s:22 t:1236535329];
		a = [block_gg:a b:b c:c d:d x:[x objectAtIndex:i + 1] s:5 t:-165796510];
		d = [block_gg:d b:a c:b d:c x:[x objectAtIndex:i + 6] s:9 t:-1069501632];
		c = [block_gg:c b:d c:a d:b x:[x objectAtIndex:i + 11] s:14 t:643717713];
		b = [block_gg:b b:c c:d d:a x:[x objectAtIndex:i] s:20 t:-373897302];
		a = [block_gg:a b:b c:c d:d x:[x objectAtIndex:i + 5] s:5 t:-701558691];
		d = [block_gg:d b:a c:b d:c x:[x objectAtIndex:i + 10] s:9 t:38016083];
		c = [block_gg:c b:d c:a d:b x:[x objectAtIndex:i + 15] s:14 t:-660478335];
		b = [block_gg:b b:c c:d d:a x:[x objectAtIndex:i + 4] s:20 t:-405537848];
		a = [block_gg:a b:b c:c d:d x:[x objectAtIndex:i + 9] s:5 t:568446438];
		d = [block_gg:d b:a c:b d:c x:[x objectAtIndex:i + 14] s:9 t:-1019803690];
		c = [block_gg:c b:d c:a d:b x:[x objectAtIndex:i + 3] s:14 t:-187363961];
		b = [block_gg:b b:c c:d d:a x:[x objectAtIndex:i + 8] s:20 t:1163531501];
		a = [block_gg:a b:b c:c d:d x:[x objectAtIndex:i + 13] s:5 t:-1444681467];
		d = [block_gg:d b:a c:b d:c x:[x objectAtIndex:i + 2] s:9 t:-51403784];
		c = [block_gg:c b:d c:a d:b x:[x objectAtIndex:i + 7] s:14 t:1735328473];
		b = [block_gg:b b:c c:d d:a x:[x objectAtIndex:i + 12] s:20 t:-1926607734];
		a = [block_hh:a b:b c:c d:d x:[x objectAtIndex:i + 5] s:4 t:-378558];
		d = [block_hh:d b:a c:b d:c x:[x objectAtIndex:i + 8] s:11 t:-2022574463];
		c = [block_hh:c b:d c:a d:b x:[x objectAtIndex:i + 11] s:16 t:1839030562];
		b = [block_hh:b b:c c:d d:a x:[x objectAtIndex:i + 14] s:23 t:-35309556];
		a = [block_hh:a b:b c:c d:d x:[x objectAtIndex:i + 1] s:4 t:-1530992060];
		d = [block_hh:d b:a c:b d:c x:[x objectAtIndex:i + 4] s:11 t:1272893353];
		c = [block_hh:c b:d c:a d:b x:[x objectAtIndex:i + 7] s:16 t:-155497632];
		b = [block_hh:b b:c c:d d:a x:[x objectAtIndex:i + 10] s:23 t:-1094730640];
		a = [block_hh:a b:b c:c d:d x:[x objectAtIndex:i + 13] s:4 t:681279174];
		d = [block_hh:d b:a c:b d:c x:[x objectAtIndex:i] s:11 t:-358537222];
		c = [block_hh:c b:d c:a d:b x:[x objectAtIndex:i + 3] s:16 t:-722521979];
		b = [block_hh:b b:c c:d d:a x:[x objectAtIndex:i + 6] s:23 t:76029189];
		a = [block_hh:a b:b c:c d:d x:[x objectAtIndex:i + 9] s:4 t:-640364487];
		d = [block_hh:d b:a c:b d:c x:[x objectAtIndex:i + 12] s:11 t:-421815835];
		c = [block_hh:c b:d c:a d:b x:[x objectAtIndex:i + 15] s:16 t:530742520];
		b = [block_hh:b b:c c:d d:a x:[x objectAtIndex:i + 2] s:23 t:-995338651];
		a = [block_ii:a b:b c:c d:d x:[x objectAtIndex:i] s:6 t:-198630844];
		d = [block_ii:d b:a c:b d:c x:[x objectAtIndex:i + 7] s:10 t:1126891415];
		c = [block_ii:c b:d c:a d:b x:[x objectAtIndex:i + 14] s:15 t:-1416354905];
		b = [block_ii:b b:c c:d d:a x:[x objectAtIndex:i + 5] s:21 t:-57434055];
		a = [block_ii:a b:b c:c d:d x:[x objectAtIndex:i + 12] s:6 t:1700485571];
		d = [block_ii:d b:a c:b d:c x:[x objectAtIndex:i + 3] s:10 t:-1894986606];
		c = [block_ii:c b:d c:a d:b x:[x objectAtIndex:i + 10] s:15 t:-1051523];
		b = [block_ii:b b:c c:d d:a x:[x objectAtIndex:i + 1] s:21 t:-2054922799];
		a = [block_ii:a b:b c:c d:d x:[x objectAtIndex:i + 8] s:6 t:1873313359];
		d = [block_ii:d b:a c:b d:c x:[x objectAtIndex:i + 15] s:10 t:-30611744];
		c = [block_ii:c b:d c:a d:b x:[x objectAtIndex:i + 6] s:15 t:-1560198380];
		b = [block_ii:b b:c c:d d:a x:[x objectAtIndex:i + 13] s:21 t:1309151649];
		a = [block_ii:a b:b c:c d:d x:[x objectAtIndex:i + 4] s:6 t:-145523070];
		d = [block_ii:d b:a c:b d:c x:[x objectAtIndex:i + 11] s:10 t:-1120210379];
		c = [block_ii:c b:d c:a d:b x:[x objectAtIndex:i + 2] s:15 t:718787259];
		b = [block_ii:b b:c c:d d:a x:[x objectAtIndex:i + 9] s:21 t:-343485551];
		a = [block_addme:a y:olda];
		b = [block_addme:b y:oldb];
		c = [block_addme:c y:oldc];
		d = [block_addme:d y:oldd];
		i += 16;
	}
	return [[NSMutableArray alloc] initWithObjects:a, b, c, d, nil];
}
id(^block_init)() = ^() { [me init]; };
- (id) init{
	self = [super init];
	me = self;
	return self;
}

@end
