//
//  String
//  Tests
//
//  Source generated by Haxe Objective-C target
//

#import "String.h"

@implementation NSMutableString ( String )

+ (NSMutableString*) fromCharCode:(int)code{
	return [NSString stringWithFormat: @"%C", code];
}
// Getters/setters for property length
static int length__;
- (int) length { return length__; }
- (void) setLength:(int)val { length__ = val; }

- (NSMutableString*) toUpperCase{
	return nil;
}
- (NSMutableString*) toLowerCase{
	return nil;
}
- (NSMutableString*) charAt:(int)index{
	return nil;
}
- (int) charCodeAt:(int)index{
	return nil;
}
- (int) indexOf:(NSMutableString*)str startIndex:(int)startIndex{
	// Simulated optional arguments
	if (startIndex == nil) startIndex = nil;
	
	startIndex = ( (startIndex == nil) ? 0 : startIndex);
	NSRange range = [self rangeOfString:str options:NSLiteralSearch range:NSMakeRange(startIndex,self.length-startIndex)];
	if ( range.location != NSNotFound ) {
		return range.location;
	};
	return -1;
}
- (int) lastIndexOf:(NSMutableString*)str startIndex:(int)startIndex{
	// Simulated optional arguments
	if (startIndex == nil) startIndex = nil;
	
	startIndex = ( (startIndex == nil) ? 0 : startIndex);
	NSRange range = [self rangeOfString:str options:NSBackwardsSearch range:NSMakeRange(startIndex,self.length-startIndex)];
	if ( range.location != NSNotFound ) {
		return range.location;
	};
	return -1;
}
- (NSMutableArray*) split:(NSMutableString*)delimiter{
	return nil;
}
- (NSMutableString*) substr:(int)pos len:(int)len{
	// Simulated optional arguments
	if (len == nil) len = nil;
	
	if (len == 0) return (NSMutableString*)@"";
	int sl = self.length;
	if (len == nil) len = sl;
	if (pos == nil) pos = 0;
	if (pos != 0 && len < 0) return (NSMutableString*)@"";
	if (pos < 0) {
		pos = sl + pos;
		if (pos < 0) pos = 0;
	}
	else if (len < 0) len = sl + len - pos;
	if (pos + len > sl) len = sl - pos;
	if (pos < 0 || len <= 0) return (NSMutableString*)@"";
	return [self substringFromIndex:pos];
	return [self substringWithRange:NSMakeRange(pos,len)];
}
- (NSMutableString*) substring:(int)startIndex endIndex:(int)endIndex{
	// Simulated optional arguments
	if (endIndex == nil) endIndex = nil;
	
	if (endIndex == nil) endIndex = self.length;
	else if (endIndex < 0) endIndex = 0;
	else if (endIndex > self.length) endIndex = self.length;
	if (startIndex < 0) startIndex = 0;
	else if (startIndex > self.length) startIndex = self.length;
	if (startIndex > endIndex) {
		int tmp = startIndex;
		startIndex = endIndex;
		endIndex = tmp;
	}
	return [self substr:startIndex len:endIndex - startIndex];
}
- (NSMutableString*) toString{
	return nil;
}
- (id) init:(NSMutableString*)string{
	self = [super init];
	return self;
}

@end
