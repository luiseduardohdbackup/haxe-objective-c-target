//
//  List
//  Tests
//
//  Source generated by Haxe Objective-C target
//

#import "List.h"

@implementation List

@synthesize h;
@synthesize q;
@synthesize length;
- (void) add:(id)item{
	
	NSMutableArray *x = [[NSMutableArray alloc] initWithObjects:item, nil]];
	if (self.FA_ .h == nil) self.FA_ .h = x
	else [self.FA_ .q objectAtIndex:1] = x;
	self.FA_ .q = x;
	self.FA_ .length++;
}
- (void) push:(id)item{
	
	NSMutableArray *x = [[NSMutableArray alloc] initWithObjects:item, self.FA_ .h, nil]];
	self.FA_ .h = x;
	if (self.FA_ .q == nil) self.FA_ .q = x;
	self.FA_ .length++;
}
- (id) first{
	return ( (self.FA_ .h == nil) ? nil : [self.FA_ .h objectAtIndex:0]);
}
- (id) last{
	return ( (self.FA_ .q == nil) ? nil : [self.FA_ .q objectAtIndex:0]);
}
- (id) pop{
	if (self.FA_ .h == nil) return nil;
	id x = [self.FA_ .h objectAtIndex:0];
	self.FA_ .h = [self.FA_ .h objectAtIndex:1];
	if (self.FA_ .h == nil) self.FA_ .q = nil;
	self.FA_ .length--;
	return x;
}
- (BOOL) isEmpty{
	return self.FA_ .h == nil;
}
- (void) clear{
	self.FA_ .h = nil;
	self.FA_ .q = nil;
	self.FA_ .length = 0;
}
- (BOOL) remove:(id)v{
	
	NSMutableArray *prev = nil;
	
	NSMutableArray *l = self.FA_ .h;
	while (l != nil) {
		if ([l objectAtIndex:0] == v) {
			if (prev == nil) self.FA_ .h = [l objectAtIndex:1]
			else [prev objectAtIndex:1] = [l objectAtIndex:1];
			if (self.FA_ .q == l) self.FA_ .q = prev;
			self.FA_ .length--;
			return YES;
		}
		prev = l;
		l = [l objectAtIndex:1];
	}
	return NO;
}
- (id_anon*) iterator{
	return (id_anon*)struct {
	h:self.FA_ .h; hasNext:^(id){
		return self.FA_ .h != nil;
	}; next:^(id){
		if (self.FA_ .h == nil) return nil;
		id x = [self.FA_ .h objectAtIndex:0];
		self.FA_ .h = [self.FA_ .h objectAtIndex:1];
		return x;
	}
	} structName;
}
- (NSMutableString*) toString{
	
	StringBuf *s = [[StringBuf alloc] init];
	BOOL first = YES;
	
	NSMutableArray *l = self.FA_ .h;
	[s.FA_ .b appendString:@"{"];
	while (l != nil) {
		if (first) first = NO
		else [s.FA_ .b appendString:@", "];
		s.FA_ .b += [StdFA_TAnon_ FA_  string:[StdFA_TAnon_ FA_  string:[l objectAtIndex:0]]];
		l = [l objectAtIndex:1];
	}
	[s.FA_ .b appendString:@"}"];
	return s.FA_ .b;
}
- (NSMutableString*) join:(NSMutableString*)sep{
	
	StringBuf *s = [[StringBuf alloc] init];
	BOOL first = YES;
	
	NSMutableArray *l = self.FA_ .h;
	while (l != nil) {
		if (first) first = NO
		else s.FA_ .b += [StdFA_TAnon_ FA_  string:sep];
		s.FA_ .b += [StdFA_TAnon_ FA_  string:[l objectAtIndex:0]];
		l = [l objectAtIndex:1];
	}
	return s.FA_ .b;
}
- (List*) filter:(SEL*)f{
	
	List *l2 = [[List alloc] init];
	
	NSMutableArray *l = self.FA_ .h;
	while (l != nil) {
		id v = [l objectAtIndex:0];
		l = [l objectAtIndex:1];
		if ([f:v]) [l2 FA_  add:v];
	}
	return l2;
}
- (List*) map:(SEL*)f{
	
	List *b = [[List alloc] init];
	
	NSMutableArray *l = self.FA_ .h;
	while (l != nil) {
		id v = [l objectAtIndex:0];
		l = [l objectAtIndex:1];
		[b FA_  add:[f:v]];
	}
	return b;
}
- (id) init{
	self = [super init];
	self.FA_ .length = 0;
	return self;
}

@end
