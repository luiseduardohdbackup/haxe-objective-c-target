//
//  TestType
//  Test
//
//  Source generated by Haxe Objective-C target
//

#import "../unit/TestType.h"

@implementation TestType

+ (int) overloadFake_Int:(int)a{
	return a;
}
+ (NSMutableArray*) gf3_haxe_Template_Array:(Template*)a b:(NSMutableArray*)b{
	
	Template *clone = [[Template alloc] init:(NSMutableString*)@"foo"];
	[b push:clone];
	return b;
}
+ (NSMutableArray*) gf3_String_Array:(NSMutableString*)a b:(NSMutableArray*)b{
	
	NSMutableString *clone = [[NSMutableString alloc] init:(NSMutableString*)@"foo"];
	[b push:clone];
	return b;
}
+ (NSMutableString*) gf2_String_Array:(NSMutableString*)a b:(NSMutableArray*)b{
	return [Std string:a] + [Std string:b];
}
+ (NSMutableString*) gf2_String_Int:(NSMutableString*)a b:(NSMutableArray*)b{
	return [Std string:a] + [Std string:b];
}
+ (GenericStack*) gf1_haxe_ds_GenericStack:(GenericStack*)a{
	return a;
}
+ (Template*) gf1_haxe_Template:(Template*)a{
	return a;
}
+ (BOOL) gf1_Bool:(BOOL)a{
	return a;
}
+ (NSMutableString*) gf1_String:(NSMutableString*)a{
	return a;
}
+ (int) gf1_Int:(int)a{
	return a;
}
+ (NSMutableString*) u:(NSMutableString*)s{
	return s;
}
+ (NSMutableString*) overloadFake_String:(NSMutableString*)a{
	return [a stringByAppendingString:(NSMutableString*)@"foo"];
}
+ (void) _mapMe:(Map*)map{
}
- (void) testType{
	
	NSMutableString *name = [[(NSMutableString*)@"unit" stringByAppendingString:(NSMutableString*)@"."] stringByAppendingString:(NSMutableString*)@"MyClass"];
	[self eq:[Type resolveClass:name] v2:MyClass pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"36",@"unit.TestType",@"testType",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[Type getClassName:MyClass] v2:name pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"37",@"unit.TestType",@"testType",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[Type getClassFields:MyClass] length v2:0 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"38",@"unit.TestType",@"testType",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testFields{
	
	NSMutableArray *sfields = (NSMutableArray*)[Type getClassFields:MySubClass];
	[self eq:sfields length v2:1 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"43",@"unit.TestType",@"testFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[sfields objectAtIndex:0] v2:(NSMutableString*)@"XXX" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"44",@"unit.TestType",@"testFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	NSMutableArray *fields = [[NSMutableArray alloc] initWithObjects:(NSMutableString*)@"add", (NSMutableString*)@"get", (NSMutableString*)@"intValue", (NSMutableString*)@"ref", (NSMutableString*)@"set", (NSMutableString*)@"stringValue", (NSMutableString*)@"val", nil];
	
	NSMutableArray *fl = (NSMutableArray*)[Type getInstanceFields:MyClass];
	[fl sort:Reflect compare];
	[self eq:[fl join:(NSMutableString*)@"|"] v2:[fields join:(NSMutableString*)@"|"] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"49",@"unit.TestType",@"testFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	NSMutableArray *fl1 = (NSMutableArray*)[Type getInstanceFields:MySubClass];
	[fl1 sort:Reflect compare];
	[self eq:[fl1 join:(NSMutableString*)@"|"] v2:[fields join:(NSMutableString*)@"|"] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"52",@"unit.TestType",@"testFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	NSMutableArray *fl2 = (NSMutableArray*)[Type getInstanceFields:VarProps];
	
	NSMutableArray *fields1 = [[NSMutableArray alloc] initWithObjects:(NSMutableString*)@"get_x", (NSMutableString*)@"get_y", (NSMutableString*)@"set_x", (NSMutableString*)@"set_y", (NSMutableString*)@"set_z", (NSMutableString*)@"y", (NSMutableString*)@"z", nil];
	[fl2 sort:Reflect compare];
	[self eq:[fl2 join:(NSMutableString*)@"|"] v2:[fields1 join:(NSMutableString*)@"|"] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"61",@"unit.TestType",@"testFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	NSMutableArray *fl3 = (NSMutableArray*)[Type getClassFields:VarProps];
	
	NSMutableArray *fields2 = [[NSMutableArray alloc] initWithObjects:(NSMutableString*)@"SY", (NSMutableString*)@"get_SX", (NSMutableString*)@"get_SY", (NSMutableString*)@"set_SX", (NSMutableString*)@"set_SY", nil];
	[fl3 sort:Reflect compare];
	[self eq:[fl3 join:(NSMutableString*)@"|"] v2:[fields2 join:(NSMutableString*)@"|"] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"67",@"unit.TestType",@"testFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testEnumEq{
	[self t:[Type enumEq:nil b:nil] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"73",@"unit.TestType",@"testEnumEq",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self f:[Type enumEq: A b:nil] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"74",@"unit.TestType",@"testEnumEq",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self f:[Type enumEq:nil b:FEnum[ D: A]] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"75",@"unit.TestType",@"testEnumEq",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:[Type enumEq: A b: A] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"77",@"unit.TestType",@"testEnumEq",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:[Type enumEq: B b: B] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"78",@"unit.TestType",@"testEnumEq",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self f:[Type enumEq: A b: B] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"79",@"unit.TestType",@"testEnumEq",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:[Type enumEq:FEnum[ C:1 b:(NSMutableString*)@"hello"] b:FEnum[ C:1 b:(NSMutableString*)@"hello"]] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"81",@"unit.TestType",@"testEnumEq",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self f:[Type enumEq:FEnum[ C:1 b:(NSMutableString*)@"hello"] b:FEnum[ C:1 b:(NSMutableString*)@"hellox"]] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"82",@"unit.TestType",@"testEnumEq",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:[Type enumEq:FEnum[ D: A] b:FEnum[ D: A]] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"84",@"unit.TestType",@"testEnumEq",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self f:[Type enumEq:FEnum[ D: A] b:FEnum[ D: B]] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"85",@"unit.TestType",@"testEnumEq",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testPossibleBug{
	
	NSMutableArray *c = (NSMutableArray*)[Type getEnumConstructs:];
	
	NSMutableString *old = [c objectAtIndex:0];
	[c objectAtIndex:0] = (NSMutableString*)@"modified";
	[self eq:[[Type getEnumConstructs:] objectAtIndex:0] v2:old pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"93",@"unit.TestType",@"testPossibleBug",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	NSMutableArray *i = (NSMutableArray*)[Type getInstanceFields:TestType];
	
	NSMutableString *old1 = [i objectAtIndex:0];
	[i objectAtIndex:0] = (NSMutableString*)@"modified";
	[self eq:[[Type getInstanceFields:TestType] objectAtIndex:0] v2:old1 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"98",@"unit.TestType",@"testPossibleBug",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	NSMutableArray *i1 = (NSMutableArray*)[Type getClassFields:TestType];
	
	NSMutableString *old2 = [i1 objectAtIndex:0];
	[i1 objectAtIndex:0] = (NSMutableString*)@"modified";
	[self eq:[[Type getClassFields:TestType] objectAtIndex:0] v2:old2 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"103",@"unit.TestType",@"testPossibleBug",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testAllField{
	[self eq:[[Type allEnums:] join:(NSMutableString*)@"#"] v2:(NSMutableString*)@"A#B" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"111",@"unit.TestType",@"testAllField",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testWiderVisibility{
	
	MyChild1 *c = [[MyChild1 alloc] init];
	[self eq:12 v2:[c a] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"116",@"unit.TestType",@"testWiderVisibility",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	MyChild2 *mc2 = [[MyChild2 alloc] init];
	[self eq:21 v2:[mc2 test1:[[MyChild1 alloc] init]] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"121",@"unit.TestType",@"testWiderVisibility",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testUnifyMin{
	
	NSMutableArray *ti1;
	
	NSMutableArray *tbase;
	
	NSMutableArray *tpbase;
	
	NSMutableArray *tnullbool;
	
	NSMutableArray *tnullbase;
	
	NSMutableArray *tchild1;
	
	NSMutableArray *ts;
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(Array,[TInst(unit.Base,[])])" v2:(NSMutableString*)@"TInst(Array,[TInst(unit.Base,[])])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"141",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(Array,[TInst(unit.Base,[])])" v2:(NSMutableString*)@"TInst(Array,[TInst(unit.Base,[])])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"142",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(Array,[TInst(unit.Base,[])])" v2:(NSMutableString*)@"TInst(Array,[TInst(unit.Base,[])])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"143",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(Array,[TInst(unit.I1,[])])" v2:(NSMutableString*)@"TInst(Array,[TInst(unit.I1,[])])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"144",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(Array,[TInst(unit.I1,[])])" v2:(NSMutableString*)@"TInst(Array,[TInst(unit.I1,[])])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"145",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(Array,[TInst(unit.I1,[])])" v2:(NSMutableString*)@"TInst(Array,[TInst(unit.I1,[])])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"147",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(Array,[TInst(unit.Base,[])])" v2:(NSMutableString*)@"TInst(Array,[TInst(unit.Base,[])])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"148",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(Array,[TInst(unit.Base,[])])" v2:(NSMutableString*)@"TInst(Array,[TInst(unit.Base,[])])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"149",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(Array,[TInst(unit.PClassBase,[TAbstract(Float,[])])])" v2:(NSMutableString*)@"TInst(Array,[TInst(unit.PClassBase,[TAbstract(Float,[])])])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"151",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(Array,[TAbstract(Bool,[])])" v2:(NSMutableString*)@"TInst(Array,[TAbstract(Bool,[])])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"153",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(Array,[TAbstract(Bool,[])])" v2:(NSMutableString*)@"TInst(Array,[TAbstract(Bool,[])])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"154",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(Array,[TInst(unit.Base,[])])" v2:(NSMutableString*)@"TInst(Array,[TInst(unit.Base,[])])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"155",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(Array,[TInst(unit.Base,[])])" v2:(NSMutableString*)@"TInst(Array,[TInst(unit.Base,[])])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"157",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(Array,[TInst(unit.Base,[])])" v2:(NSMutableString*)@"TInst(Array,[TInst(unit.Base,[])])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"158",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(Array,[TInst(unit.Base,[])])" v2:(NSMutableString*)@"TInst(Array,[TInst(unit.Base,[])])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"159",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(Array,[TInst(unit.Child1,[])])" v2:(NSMutableString*)@"TInst(Array,[TInst(unit.Child1,[])])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"160",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(Array,[TAnonymous(<anonymous>)])" v2:(NSMutableString*)@"TInst(Array,[TAnonymous(<anonymous>)])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"161",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(Array,[TAnonymous(<anonymous>)])" v2:(NSMutableString*)@"TInst(Array,[TAnonymous(<anonymous>)])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"162",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	
	Base *tbase1;
	
	I1 *ti11;
	BOOL tnullbool1;
	id ts1;
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(unit.Base,[])" v2:(NSMutableString*)@"TInst(unit.Base,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"175",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(unit.Base,[])" v2:(NSMutableString*)@"TInst(unit.Base,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"176",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(unit.Base,[])" v2:(NSMutableString*)@"TInst(unit.Base,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"180",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(unit.I1,[])" v2:(NSMutableString*)@"TInst(unit.I1,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"184",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(unit.I1,[])" v2:(NSMutableString*)@"TInst(unit.I1,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"185",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TAbstract(Bool,[])" v2:(NSMutableString*)@"TAbstract(Bool,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"187",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TAbstract(Bool,[])" v2:(NSMutableString*)@"TAbstract(Bool,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"188",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TAnonymous(<anonymous>)" v2:(NSMutableString*)@"TAnonymous(<anonymous>)" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"189",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TAnonymous(<anonymous>)" v2:(NSMutableString*)@"TAnonymous(<anonymous>)" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"190",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(unit.Base,[])" v2:(NSMutableString*)@"TInst(unit.Base,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"194",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(unit.Base,[])" v2:(NSMutableString*)@"TInst(unit.Base,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"195",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(unit.I1,[])" v2:(NSMutableString*)@"TInst(unit.I1,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"196",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(unit.I1,[])" v2:(NSMutableString*)@"TInst(unit.I1,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"197",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TAbstract(Bool,[])" v2:(NSMutableString*)@"TAbstract(Bool,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"199",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TAbstract(Bool,[])" v2:(NSMutableString*)@"TAbstract(Bool,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"200",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TAnonymous(<anonymous>)" v2:(NSMutableString*)@"TAnonymous(<anonymous>)" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"201",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TAnonymous(<anonymous>)" v2:(NSMutableString*)@"TAnonymous(<anonymous>)" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"202",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(Array,[TAnonymous(<anonymous>)])" v2:(NSMutableString*)@"TInst(Array,[TAnonymous(<anonymous>)])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"204",@"unit.TestType",@"testUnifyMin",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
}
- (void) testCallback{
	SEL func = ^- (int) :(int)a b:(NSMutableString*)b c:(float)c{
		return a;
	}
	SEL tstringfloat = ^- (int) :(NSMutableString*)b c:(float)c{
		return 0;
	}
	SEL tfloat = ^- (int) :(float)c{
		return 0;
	}
	SEL tvoid = ^- (int) {
		return 0;
	}
	SEL tintstring = ^- (int) :(int)a b:(NSMutableString*)b{
		return 0;
	}
	SEL tintfloat = ^- (int) :(int)a c:(float)c{
		return 0;
	}
	SEL tint = ^- (int) :(int)a{
		return 0;
	}
	SEL tstring = ^- (int) :(NSMutableString*)b{
		return 0;
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))" v2:(NSMutableString*)@"TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"225",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))" v2:(NSMutableString*)@"TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"226",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))" v2:(NSMutableString*)@"TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"227",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))" v2:(NSMutableString*)@"TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"228",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TFun([],TAbstract(Int,[]))" v2:(NSMutableString*)@"TFun([],TAbstract(Int,[]))" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"232",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TFun([{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))" v2:(NSMutableString*)@"TFun([{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"236",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TFun([{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))" v2:(NSMutableString*)@"TFun([{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"237",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TFun([{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))" v2:(NSMutableString*)@"TFun([{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"241",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TFun([{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))" v2:(NSMutableString*)@"TFun([{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"242",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TFun([{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))" v2:(NSMutableString*)@"TFun([{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"243",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => b, t => TInst(String,[]), opt => false }],TAbstract(Int,[]))" v2:(NSMutableString*)@"TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => b, t => TInst(String,[]), opt => false }],TAbstract(Int,[]))" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"247",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))" v2:(NSMutableString*)@"TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"248",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TFun([{ name => a, t => TAbstract(Int,[]), opt => false }],TAbstract(Int,[]))" v2:(NSMutableString*)@"TFun([{ name => a, t => TAbstract(Int,[]), opt => false }],TAbstract(Int,[]))" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"249",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TFun([{ name => b, t => TInst(String,[]), opt => false }],TAbstract(Int,[]))" v2:(NSMutableString*)@"TFun([{ name => b, t => TInst(String,[]), opt => false }],TAbstract(Int,[]))" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"250",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	[self eq:1 v2:[ (((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f = [[NSMutableArray alloc] initWithObjects:func, nil]
	__r__ = ^- (int) :(int)a b:(NSMutableString*)b c:(float)c{
		return [[f objectAtIndex:0]:a b:b c:c];
	}
	return __r__{
		
		SEL* __r__}
	}(self))):1 b:(NSMutableString*)@"2" c:3] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"254",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:2 v2:[ (((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f = [[NSMutableArray alloc] initWithObjects:func, nil]
	__r__2 = ^- (int) :(NSMutableString*)b c:(float)c{
		return [[f objectAtIndex:0]:2 b:b c:c];
	}
	return __r__2{
		
		SEL* __r__2}
	}(self))):(NSMutableString*)@"2" c:3] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"255",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:2 v2:[ (((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f = [[NSMutableArray alloc] initWithObjects:func, nil]
	__r__3 = ^- (int) :(float)c{
		return [[f objectAtIndex:0]:2 b:(NSMutableString*)@"3" c:c];
	}
	return __r__3{
		
		SEL* __r__3}
	}(self))):3] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"256",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:2 v2:[ (((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f = [[NSMutableArray alloc] initWithObjects:func, nil]
	__r__4 = ^- (int) {
		return [[f objectAtIndex:0]:2 b:(NSMutableString*)@"3" c:4];
	}
	return __r__4{
		
		SEL* __r__4}
	}(self)))] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"257",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:1 v2:[ (((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f = [[NSMutableArray alloc] initWithObjects:func, nil]
	__r__5 = ^- (int) :(int)a{
		return [[f objectAtIndex:0]:a b:(NSMutableString*)@"2" c:3];
	}
	return __r__5{
		
		SEL* __r__5}
	}(self))):1] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"259",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:1 v2:[ (((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f = [[NSMutableArray alloc] initWithObjects:func, nil]
	__r__6 = ^- (int) :(int)a c:(float)c{
		return [[f objectAtIndex:0]:a b:(NSMutableString*)@"2" c:c];
	}
	return __r__6{
		
		SEL* __r__6}
	}(self))):1 c:3] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"260",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:1 v2:[ (((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f = [[NSMutableArray alloc] initWithObjects:func, nil]
	__r__7 = ^- (int) :(int)a b:(NSMutableString*)b c:(float)c{
		return [[f objectAtIndex:0]:a b:b c:c];
	}
	return __r__7{
		
		SEL* __r__7}
	}(self))):1 b:(NSMutableString*)@"2" c:3] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"261",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:1 v2:[ (((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f = [[NSMutableArray alloc] initWithObjects:func, nil]
	__r__8 = ^- (int) :(int)a c:(float)c{
		return [[f objectAtIndex:0]:a b:(NSMutableString*)@"2" c:c];
	}
	return __r__8{
		
		SEL* __r__8}
	}(self))):1 c:2] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"263",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:1 v2:[ (((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f = [[NSMutableArray alloc] initWithObjects:((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f = [[NSMutableArray alloc] initWithObjects:func, nil]
	__r__10 = ^- (int) :(int)a b:(NSMutableString*)b c:(float)c{
		return [[f objectAtIndex:0]:a b:b c:c];
	}
	return __r__10{
		
		SEL* __r__10}
	}($this)), nil]
	__r__9 = ^- (int) :(int)a{
		return [[f objectAtIndex:0]:a b:(NSMutableString*)@"2" c:3];
	}
	return __r__9{
		
		SEL* __r__9}
	}(self))):1] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"265",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:1 v2:[ (((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f = [[NSMutableArray alloc] initWithObjects:((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f = [[NSMutableArray alloc] initWithObjects:func, nil]
	__r__12 = ^- (int) :(NSMutableString*)b c:(float)c{
		return [[f objectAtIndex:0]:1 b:b c:c];
	}
	return __r__12{
		
		SEL* __r__12}
	}($this)), nil]
	__r__11 = ^- (int) {
		return [[f objectAtIndex:0]:(NSMutableString*)@"2" c:3];
	}
	return __r__11{
		
		SEL* __r__11}
	}(self)))] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"266",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:1 v2:[ (((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f = [[NSMutableArray alloc] initWithObjects:((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f = [[NSMutableArray alloc] initWithObjects:func, nil]
	__r__14 = ^- (int) :(NSMutableString*)b c:(float)c{
		return [[f objectAtIndex:0]:1 b:b c:c];
	}
	return __r__14{
		
		SEL* __r__14}
	}($this)), nil]
	__r__13 = ^- (int) :(float)c{
		return [[f objectAtIndex:0]:(NSMutableString*)@"2" c:c];
	}
	return __r__13{
		
		SEL* __r__13}
	}(self))):3] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"267",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:1 v2:[ (((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f = [[NSMutableArray alloc] initWithObjects:((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f = [[NSMutableArray alloc] initWithObjects:func, nil]
	__r__16 = ^- (int) :(int)a c:(float)c{
		return [[f objectAtIndex:0]:a b:(NSMutableString*)@"2" c:c];
	}
	return __r__16{
		
		SEL* __r__16}
	}($this)), nil]
	__r__15 = ^- (int) :(float)c{
		return [[f objectAtIndex:0]:1 c:c];
	}
	return __r__15{
		
		SEL* __r__15}
	}(self))):3] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"268",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	int a = 5;
	
	NSMutableString *b = (NSMutableString*)@"foo";
	SEL cb = ((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f = [[NSMutableArray alloc] initWithObjects:func, nil]; 
	NSMutableArray *a1 = [[NSMutableArray alloc] initWithObjects:a, nil]
	__r__17 = ^- (int) :(NSMutableString*)b1 c:(float)c{
		return [[f objectAtIndex:0]:[a1 objectAtIndex:0] b:b1 c:c];
	}
	return __r__17{
		
		SEL* __r__17}
	}(self));
	a = 6;
	func = ^- (int) :(int)a1 b1:(NSMutableString*)b1 c:(float)c{
		return ^(int)@throw (NSMutableString*)@"error";
		return __r__18{
			
			int* __r__18}
		}();
	}
	[self eq:5 v2:[cb:b c:0] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"275",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	SEL optfunc = ^- (int) :(int)a1 b1:(int)b1 c:(int)c{
		// Simulated optional arguments
		if (c == nil) c = 2;
		
		return a1 + b1 + c;
	}
	[self eq:6 v2:[ (((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f = [[NSMutableArray alloc] initWithObjects:optfunc, nil]
	__r__19 = ^- (int) :(int)b1{
		return [[f objectAtIndex:0]:1 b:b1 c:nil];
	}
	return __r__19{
		
		SEL* __r__19}
	}(self))):3] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"278",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:6 v2:[ (((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f = [[NSMutableArray alloc] initWithObjects:optfunc, nil]
	__r__20 = ^- (int) {
		return [[f objectAtIndex:0]:1 b:3 c:nil];
	}
	return __r__20{
		
		SEL* __r__20}
	}(self)))] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"279",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:7 v2:[ (((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f = [[NSMutableArray alloc] initWithObjects:optfunc, nil]
	__r__21 = ^- (int) :(int)a1 b1:(int)b1 c:(int)c{
		// Simulated optional arguments
		if (c == nil) c = nil;
		
		return [[f objectAtIndex:0]:a1 b:b1 c:c];
	}
	return __r__21{
		
		SEL* __r__21}
	}(self))):1 b:2 c:4] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"281",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:7 v2:[ (((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f = [[NSMutableArray alloc] initWithObjects:optfunc, nil]
	__r__22 = ^- (int) :(int)a1 c:(int)c{
		// Simulated optional arguments
		if (c == nil) c = nil;
		
		return [[f objectAtIndex:0]:a1 b:2 c:c];
	}
	return __r__22{
		
		SEL* __r__22}
	}(self))):1 c:4] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"282",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	SEL foo = ^- (NSMutableString*) :(int)x p:(id)p{
		// Simulated optional arguments
		if (p == nil) p = nil;
		
		return [(NSMutableString*)@"foo" stringByAppendingString:x];
	}
	SEL f = ((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f = [[NSMutableArray alloc] initWithObjects:foo, nil]
	__r__23 = ^- (NSMutableString*) {
		return [[f objectAtIndex:0]:0 p:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"285",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	return __r__23{
		
		SEL* __r__23}
	}(self));
	[self eq:(NSMutableString*)@"foo0" v2:[f] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"286",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	SEL foo1 = ^- (int) :(int)bar{
		// Simulated optional arguments
		if (bar == nil) bar = 2;
		
		return bar;
	}
	SEL l = ((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f1 = [[NSMutableArray alloc] initWithObjects:foo1, nil]
	__r__24 = ^- (int) :(int)a1{
		// Simulated optional arguments
		if (a1 == nil) a1 = nil;
		
		return [[f1 objectAtIndex:0]:a1];
	}
	return __r__24{
		
		SEL* __r__24}
	}(self));
	[self eq:2 v2:[l:nil] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"294",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	SEL foo2 = ^- (int) :(int)bar{
		// Simulated optional arguments
		if (bar == nil) bar = 2;
		
		return bar;
	}
	SEL l1 = ((SEL)($this:(snd ctx.path)) 
	NSMutableArray *f1 = [[NSMutableArray alloc] initWithObjects:foo2, nil]
	__r__25 = ^- (int) :(int)a1{
		// Simulated optional arguments
		if (a1 == nil) a1 = nil;
		
		return [[f1 objectAtIndex:0]:a1];
	}
	return __r__25{
		
		SEL* __r__25}
	}(self));
	[self eq:2 v2:[l1:nil] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"300",@"unit.TestType",@"testCallback",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testConstantAnonCovariance{
	SEL func = ^- (void) :(NSMutableString*)str str1:(id)str1 str2:(id)str2{
		// Simulated optional arguments
		if (str2 == nil) str2 = nil;
		if (str1 == nil) str1 = nil;
		
	}
	id a;
	id b = (NSMutableString*)@"bar";
	[self f:NO pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"308",@"unit.TestType",@"testConstantAnonCovariance",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self f:NO pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"309",@"unit.TestType",@"testConstantAnonCovariance",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TAnonymous(<anonymous>)" v2:(NSMutableString*)@"TAnonymous(<anonymous>)" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"310",@"unit.TestType",@"testConstantAnonCovariance",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TAnonymous(<anonymous>)" v2:(NSMutableString*)@"TAnonymous(<anonymous>)" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"311",@"unit.TestType",@"testConstantAnonCovariance",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	[self t:YES pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"312",@"unit.TestType",@"testConstantAnonCovariance",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self f:NO pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"313",@"unit.TestType",@"testConstantAnonCovariance",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self f:NO pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"314",@"unit.TestType",@"testConstantAnonCovariance",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self f:NO pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"315",@"unit.TestType",@"testConstantAnonCovariance",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:YES pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"316",@"unit.TestType",@"testConstantAnonCovariance",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:YES pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"317",@"unit.TestType",@"testConstantAnonCovariance",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:YES pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"318",@"unit.TestType",@"testConstantAnonCovariance",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:YES pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"319",@"unit.TestType",@"testConstantAnonCovariance",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TAnonymous(<anonymous>)" v2:(NSMutableString*)@"TAnonymous(<anonymous>)" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"320",@"unit.TestType",@"testConstantAnonCovariance",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	[self t:YES pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"321",@"unit.TestType",@"testConstantAnonCovariance",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self f:NO pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"322",@"unit.TestType",@"testConstantAnonCovariance",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self f:NO pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"323",@"unit.TestType",@"testConstantAnonCovariance",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testCovariantReturn{
	
	Base *b = nil;
	
	Child1 *c1 = nil;
	
	Child2_1 *c2_1 = nil;
	
	Cov2 *c = [[Cov2 alloc] init];
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(unit.Child1,[])" v2:(NSMutableString*)@"TInst(unit.Child1,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"333",@"unit.TestType",@"testCovariantReturn",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	[self t:[Std is:[c covariant] t:Child1] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"334",@"unit.TestType",@"testCovariantReturn",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:[Std is:[ ((Cov1*)c) covariant] t:Child1] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"335",@"unit.TestType",@"testCovariantReturn",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	Cov1 *br = c;
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(unit.Base,[])" v2:(NSMutableString*)@"TInst(unit.Base,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"339",@"unit.TestType",@"testCovariantReturn",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	[self t:[Std is:[br covariant] t:Child1] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"340",@"unit.TestType",@"testCovariantReturn",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	CovI *ir = c;
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(unit.Base,[])" v2:(NSMutableString*)@"TInst(unit.Base,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"344",@"unit.TestType",@"testCovariantReturn",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	[self t:[Std is:[ir covariant] t:Child1] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"345",@"unit.TestType",@"testCovariantReturn",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	id dr = c;
	[self t:[Std is:[dr covariant] t:Child1] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"349",@"unit.TestType",@"testCovariantReturn",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	Cov3 *c3 = [[Cov3 alloc] init];
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(unit.Child2_1,[])" v2:(NSMutableString*)@"TInst(unit.Child2_1,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"353",@"unit.TestType",@"testCovariantReturn",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	[self t:[Std is:[c3 covariant] t:Child2_1] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"354",@"unit.TestType",@"testCovariantReturn",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testContravariantArgs{
	SEL b = ^- (void) :(Base*)arg{
	}
	SEL c1 = ^- (void) :(Child1*)arg{
	}
	
	Ctrv2 *c = [[Ctrv2 alloc] init];
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TFun([{ name => arg, t => TInst(unit.Base,[]), opt => false }],TAbstract(Void,[]))" v2:(NSMutableString*)@"TFun([{ name => arg, t => TInst(unit.Base,[]), opt => false }],TAbstract(Void,[]))" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"363",@"unit.TestType",@"testContravariantArgs",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TFun([{ name => arg, t => TInst(unit.Child1,[]), opt => false }],TAbstract(Void,[]))" v2:(NSMutableString*)@"TFun([{ name => arg, t => TInst(unit.Child1,[]), opt => false }],TAbstract(Void,[]))" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"364",@"unit.TestType",@"testContravariantArgs",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
}
- (void) testInlineCast{
	
	NSMutableString *s = [(InlineCastB*)[[[InlineCastB alloc] init] _self] quote];
	[self eq:s v2:(NSMutableString*)@"I am the greatest." pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"369",@"unit.TestType",@"testInlineCast",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testInitFields{
	
	InitBase *c = [[InitBase alloc] init];
	[self eq:c i v2:2 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"375",@"unit.TestType",@"testInitFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:c s v2:(NSMutableString*)@"foo" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"376",@"unit.TestType",@"testInitFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:c b v2:YES pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"377",@"unit.TestType",@"testInitFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:c t v2:NSMutableString pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"378",@"unit.TestType",@"testInitFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	InitChild *c1 = [[InitChild alloc] init];
	[self eq:c1 i v2:2 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"381",@"unit.TestType",@"testInitFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:c1 s v2:(NSMutableString*)@"foo" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"382",@"unit.TestType",@"testInitFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:c1 b v2:YES pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"383",@"unit.TestType",@"testInitFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:c1 t v2:NSMutableString pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"384",@"unit.TestType",@"testInitFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	InitChildWithCtor *c2 = [[InitChildWithCtor alloc] init:nil];
	[self eq:c2 i v2:2 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"387",@"unit.TestType",@"testInitFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:c2 s v2:(NSMutableString*)@"foo" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"388",@"unit.TestType",@"testInitFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:c2 b v2:YES pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"389",@"unit.TestType",@"testInitFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:c2 t v2:NSMutableString pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"390",@"unit.TestType",@"testInitFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	InitWithoutCtor *c3 = [Type createInstance:InitWithoutCtor args:[[NSMutableArray alloc] initWithObjects:, nil]];
	[self eq:c3 i v2:2 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"393",@"unit.TestType",@"testInitFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	NSMutableArray *c4 = [[NSMutableArray alloc] initWithObjects:[[InitProperties alloc] init], nil];
	[self eq:[c4 objectAtIndex:0] accNull v2:3 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"396",@"unit.TestType",@"testInitFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[c4 objectAtIndex:0] accDefault v2:3 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"397",@"unit.TestType",@"testInitFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[c4 objectAtIndex:0] accFunc v2:3 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"398",@"unit.TestType",@"testInitFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[c4 objectAtIndex:0] accNever v2:3 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"399",@"unit.TestType",@"testInitFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[c4 objectAtIndex:0] accDynamic v2:3 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"400",@"unit.TestType",@"testInitFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self exc:^- (void) {
		[[c4 objectAtIndex:0] set_accFunc:4];
	} pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"401",@"unit.TestType",@"testInitFields",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testReturnFlow{
	SEL l = ^- (NSMutableString*) {
		while (YES) return (NSMutableString*)@"foo";
		return nil;
	}
	[self eq:[l] v2:(NSMutableString*)@"foo" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"414",@"unit.TestType",@"testReturnFlow",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testOptionalParamsSkip{
	SEL foo = ^- (NSMutableString*) :(MyEnum*)a b:(BOOL)b c:(MyEnum*)c{
		// Simulated optional arguments
		if (c == nil) c = nil;
		if (b == nil) b = nil;
		
		return (NSMutableString*)@"";
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(String,[])" v2:(NSMutableString*)@"TInst(String,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"421",@"unit.TestType",@"testOptionalParamsSkip",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(String,[])" v2:(NSMutableString*)@"TInst(String,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"422",@"unit.TestType",@"testOptionalParamsSkip",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TInst(String,[])" v2:(NSMutableString*)@"TInst(String,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"423",@"unit.TestType",@"testOptionalParamsSkip",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	YES;
}
- (void) testParamConstraints{
	
	ParamConstraintsClass *pcc = [[ParamConstraintsClass alloc] init];
	
	Base *b = [[Base alloc] init];
	
	Child1 *c1 = [[Child1 alloc] init];
	
	Unrelated *u = [[Unrelated alloc] init];
	
	CI1 *ci1 = [[CI1 alloc] init];
	[self eq:[ParamConstraintsClass staticSingle:b] v2:b pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"435",@"unit.TestType",@"testParamConstraints",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[ParamConstraintsClass staticSingle:c1] v2:c1 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"436",@"unit.TestType",@"testParamConstraints",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[pcc memberSingle:b] v2:b pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"442",@"unit.TestType",@"testParamConstraints",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[pcc memberSingle:c1] v2:c1 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"443",@"unit.TestType",@"testParamConstraints",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[pcc memberMultiple:ci1] v2:ci1 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"446",@"unit.TestType",@"testParamConstraints",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	List *l = [[List alloc] init];
	[l push:ci1];
	
	List *lmono = [[List alloc] init];
	[self eq:[pcc memberComplex:ci1 b:l] v2:l pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"453",@"unit.TestType",@"testParamConstraints",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[pcc memberComplex:ci1 b:lmono] v2:lmono pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"454",@"unit.TestType",@"testParamConstraints",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[pcc memberBasic:(NSMutableString*)@"foo" b:[[NSMutableArray alloc] initWithObjects:(NSMutableString*)@"bar", nil]] v2:(NSMutableString*)@"bar" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"457",@"unit.TestType",@"testParamConstraints",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[pcc memberAnon:struct {
	x:1; y:3.
	} structName] v2:4 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"459",@"unit.TestType",@"testParamConstraints",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[pcc memberOverload:(NSMutableString*)@"foo" b:(NSMutableString*)@"bar"];
	
	ParamConstraintsClass2 *pcc2 = [[ParamConstraintsClass2 alloc] init];
	[pcc2 check:[[NSMutableArray alloc] initWithObjects:[NSNumber numberWithInt:1], nil]];
	
	ParamConstraintsClass2 *pcc21 = [[ParamConstraintsClass2 alloc] init];
	[pcc21 bind:(NSMutableString*)@"foo"];
	[pcc21 check:[[NSMutableArray alloc] initWithObjects:(NSMutableString*)@"foo", nil]];
	
	ParamConstraintsClass2 *pcc22 = [[ParamConstraintsClass2 alloc] init];
	[pcc22 check:[[NSMutableArray alloc] initWithObjects:(NSMutableString*)@"foo", nil]];
}
- (void) testUsing{
	[self eq:[UsingChild1 test] v2:(NSMutableString*)@"FOOFOOFOO" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"486",@"unit.TestType",@"testUsing",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[UsingChild2 test] v2:(NSMutableString*)@"FOO" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"487",@"unit.TestType",@"testUsing",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[UsingUnrelated test] v2:(NSMutableString*)@"FOOFOO" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"488",@"unit.TestType",@"testUsing",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testInlineInit{
	[self eq:2 v2:2 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"493",@"unit.TestType",@"testInlineInit",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:27 v2:27 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"494",@"unit.TestType",@"testInlineInit",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:6 v2:6 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"495",@"unit.TestType",@"testInlineInit",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:NSMutableString v2:NSMutableString pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"496",@"unit.TestType",@"testInlineInit",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:60000. v2:60000. pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"497",@"unit.TestType",@"testInlineInit",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testInline{
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TAbstract(Void,[])" v2:(NSMutableString*)@"TAbstract(Void,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"502",@"unit.TestType",@"testInline",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TAbstract(Void,[])" v2:(NSMutableString*)@"TAbstract(Void,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"503",@"unit.TestType",@"testInline",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
}
- (void) inlineTest1:(NSMutableArray*)map{
	[map objectAtIndex:0];
}
- (void) inlineTest2:(NSMutableArray*)map{
	[map objectAtIndex:0];
}
- (void) testMacroRest{
	
	NSMutableArray *r = [[NSMutableArray alloc] initWithObjects:[NSNumber numberWithInt:1], [NSNumber numberWithInt:2], [NSNumber numberWithInt:3], nil];
	[self eq:r length v2:3 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"517",@"unit.TestType",@"testMacroRest",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[r objectAtIndex:0] v2:1 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"518",@"unit.TestType",@"testMacroRest",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[r objectAtIndex:1] v2:2 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"519",@"unit.TestType",@"testMacroRest",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[r objectAtIndex:2] v2:3 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"520",@"unit.TestType",@"testMacroRest",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	NSMutableArray *r1 = [[NSMutableArray alloc] initWithObjects:[NSNumber numberWithInt:1], [[NSMutableArray alloc] initWithObjects:[NSNumber numberWithInt:2], [NSNumber numberWithInt:3], nil], nil];
	[self eq:r1 length v2:2 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"523",@"unit.TestType",@"testMacroRest",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[r1 objectAtIndex:0] v2:1 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"524",@"unit.TestType",@"testMacroRest",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[[r1 objectAtIndex:1] objectAtIndex:0] v2:2 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"525",@"unit.TestType",@"testMacroRest",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[[r1 objectAtIndex:1] objectAtIndex:1] v2:3 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"526",@"unit.TestType",@"testMacroRest",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	NSMutableArray *r2 = [[NSMutableArray alloc] initWithObjects:[NSNumber numberWithInt:1], nil];
	[self eq:r2 length v2:1 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"529",@"unit.TestType",@"testMacroRest",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[r2 objectAtIndex:0] v2:1 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"530",@"unit.TestType",@"testMacroRest",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	NSMutableArray *r3 = [[NSMutableArray alloc] initWithObjects:[NSNumber numberWithInt:1], [NSNumber numberWithInt:2], [NSNumber numberWithInt:3], [NSNumber numberWithInt:4], nil];
	[self eq:r3 length v2:4 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"533",@"unit.TestType",@"testMacroRest",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[r3 objectAtIndex:0] v2:1 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"534",@"unit.TestType",@"testMacroRest",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[r3 objectAtIndex:1] v2:2 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"535",@"unit.TestType",@"testMacroRest",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[r3 objectAtIndex:2] v2:3 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"536",@"unit.TestType",@"testMacroRest",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[r3 objectAtIndex:3] v2:4 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"537",@"unit.TestType",@"testMacroRest",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	NSMutableArray *r4 = [[NSMutableArray alloc] initWithObjects:[NSNumber numberWithInt:1], [NSNumber numberWithInt:2], nil];
	[self eq:r4 length v2:2 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"540",@"unit.TestType",@"testMacroRest",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[r4 objectAtIndex:0] v2:1 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"541",@"unit.TestType",@"testMacroRest",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[r4 objectAtIndex:1] v2:2 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"542",@"unit.TestType",@"testMacroRest",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	NSMutableArray *r5 = [[NSMutableArray alloc] initWithObjects:[NSNumber numberWithInt:1], [NSNumber numberWithInt:2], [[NSMutableArray alloc] initWithObjects:[NSNumber numberWithInt:3], nil], nil];
	[self eq:r5 length v2:3 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"545",@"unit.TestType",@"testMacroRest",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[r5 objectAtIndex:0] v2:1 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"546",@"unit.TestType",@"testMacroRest",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[r5 objectAtIndex:1] v2:2 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"547",@"unit.TestType",@"testMacroRest",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[[r5 objectAtIndex:2] objectAtIndex:0] v2:3 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"548",@"unit.TestType",@"testMacroRest",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testGenericFunction{
	[TestType gf1_Int:2];
	[TestType gf1_String:(NSMutableString*)@"foo"];
	[TestType gf1_Bool:YES];
	[TestType gf1_haxe_Template:[[Template alloc] init:(NSMutableString*)@"foo"]];
	[TestType gf1_haxe_ds_GenericStack:[[GenericStack alloc] init]];
	[self hsf:TestType n:(NSMutableString*)@"gf1_Int" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"563",@"unit.TestType",@"testGenericFunction",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self hsf:TestType n:(NSMutableString*)@"gf1_String" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"564",@"unit.TestType",@"testGenericFunction",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self hsf:TestType n:(NSMutableString*)@"gf1_Bool" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"565",@"unit.TestType",@"testGenericFunction",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self hsf:TestType n:(NSMutableString*)@"gf1_haxe_Template" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"568",@"unit.TestType",@"testGenericFunction",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self hsf:TestType n:(NSMutableString*)@"gf1_haxe_ds_GenericStack" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"571",@"unit.TestType",@"testGenericFunction",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:YES pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"572",@"unit.TestType",@"testGenericFunction",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:YES pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"573",@"unit.TestType",@"testGenericFunction",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"foo[1,2]" v2:[TestType gf2_String_Int:(NSMutableString*)@"foo" b:[[NSMutableArray alloc] initWithObjects:[NSNumber numberWithInt:1], [NSNumber numberWithInt:2], nil]] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"575",@"unit.TestType",@"testGenericFunction",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"foo[[1,2]]" v2:[TestType gf2_String_Array:(NSMutableString*)@"foo" b:[[NSMutableArray alloc] initWithObjects:[[NSMutableArray alloc] initWithObjects:[NSNumber numberWithInt:1], [NSNumber numberWithInt:2], nil], nil]] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"576",@"unit.TestType",@"testGenericFunction",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self hsf:TestType n:(NSMutableString*)@"gf2_String_Int" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"577",@"unit.TestType",@"testGenericFunction",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self hsf:TestType n:(NSMutableString*)@"gf2_String_Array" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"578",@"unit.TestType",@"testGenericFunction",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	NSMutableArray *a = (NSMutableArray*)[TestType gf3_String_Array:(NSMutableString*)@"foo" b:[[NSMutableArray alloc] initWithObjects:(NSMutableString*)@"bar", (NSMutableString*)@"baz", nil]];
	[self eq:[a objectAtIndex:0] v2:(NSMutableString*)@"bar" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"581",@"unit.TestType",@"testGenericFunction",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[a objectAtIndex:1] v2:(NSMutableString*)@"baz" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"582",@"unit.TestType",@"testGenericFunction",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[a objectAtIndex:2] v2:(NSMutableString*)@"foo" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"583",@"unit.TestType",@"testGenericFunction",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self hsf:TestType n:(NSMutableString*)@"gf3_String_Array" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"584",@"unit.TestType",@"testGenericFunction",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	Template *t = [[Template alloc] init:(NSMutableString*)@"foo"];
	
	Template *ta = [[TestType gf3_haxe_Template_Array:t b:[[NSMutableArray alloc] initWithObjects:, nil]] objectAtIndex:0];
	[self f:t == ta pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"589",@"unit.TestType",@"testGenericFunction",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self hsf:TestType n:(NSMutableString*)@"gf3_haxe_Template_Array" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"590",@"unit.TestType",@"testGenericFunction",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[TestType overloadFake_Int:1] v2:1 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"593",@"unit.TestType",@"testGenericFunction",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[TestType overloadFake_String:(NSMutableString*)@"bar"] v2:(NSMutableString*)@"barfoo" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"594",@"unit.TestType",@"testGenericFunction",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testCompletion{
	
	NSMutableArray *s = [[NSMutableArray alloc] initWithObjects:struct {
	foo:[NSNumber numberWithInt:1]
	} structName, nil];
	[self eq:(NSMutableString*)@"foo:Int" v2:(NSMutableString*)@"foo:Int" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"622",@"unit.TestType",@"testCompletion",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"path(haxe)" v2:(NSMutableString*)@"path(haxe)" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"623",@"unit.TestType",@"testCompletion",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"path(haxe.macro:Expr)" v2:(NSMutableString*)@"path(haxe.macro:Expr)" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"624",@"unit.TestType",@"testCompletion",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"error(haxe.macro.Expr is not a value)" v2:(NSMutableString*)@"error(haxe.macro.Expr is not a value)" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"627",@"unit.TestType",@"testCompletion",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"path(unknownVar)" v2:(NSMutableString*)@"path(unknownVar)" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"639",@"unit.TestType",@"testCompletion",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	{
		id _it = [([[NSMutableArray alloc] initWithObjects:[s objectAtIndex:[NSNumber numberWithInt:0]], nil]) iterator];
		while ( [_it hasNext] ) do {
			id k = [_it next];
			[self eq:(NSMutableString*)@"foo:Int" v2:(NSMutableString*)@"foo:Int" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"646",@"unit.TestType",@"testCompletion",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
		}
	}
	SEL f = ^- (id) {
		return [([[NSMutableArray alloc] initWithObjects:[s objectAtIndex:[NSNumber numberWithInt:0]], nil]) iterator];
	}
	[self eq:(NSMutableString*)@"foo:Int" v2:(NSMutableString*)@"foo:Int" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"652",@"unit.TestType",@"testCompletion",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testSuperPropAccess{
	
	ChildSuperProp *c = [[ChildSuperProp alloc] init];
	[self eq:[c get_prop] v2:2 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"658",@"unit.TestType",@"testSuperPropAccess",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[c set_prop:4] v2:5 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"659",@"unit.TestType",@"testSuperPropAccess",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[c test] v2:(NSMutableString*)@"test2" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"660",@"unit.TestType",@"testSuperPropAccess",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[[c get_fProp]:9] v2:(NSMutableString*)@"test09" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"661",@"unit.TestType",@"testSuperPropAccess",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testVoidFunc{
	[self exc:^- (int) {
		@throw nil;;
		return 1;
	} pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"665",@"unit.TestType",@"testVoidFunc",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self exc:^- (NSMutableString*) {
		@throw nil;;
		return (NSMutableString*)@"foo";
	} pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"666",@"unit.TestType",@"testVoidFunc",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self exc:^- (MyEnum*) {
		@throw nil;;
		return  A;
	} pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"667",@"unit.TestType",@"testVoidFunc",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self exc:^- (Template*) {
		@throw nil;;
		return [[Template alloc] init:(NSMutableString*)@"foo"];
	} pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"669",@"unit.TestType",@"testVoidFunc",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self exc:^- (id) {
		@throw nil;;
		return nil;
	} pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"671",@"unit.TestType",@"testVoidFunc",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self exc:^- (id) {
		@throw nil;;
		return struct {
		foo:1
		} structName;
	} pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"672",@"unit.TestType",@"testVoidFunc",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testAbstractCastConstraints{
	
	AbstractZ *z = [[AbstractBase alloc] init:(NSMutableString*)@"foo"];
	
	NSMutableString *s = [AbstractZImpl toString:z];
	[self t:YES pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"678",@"unit.TestType",@"testAbstractCastConstraints",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"foo" v2:s pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"681",@"unit.TestType",@"testAbstractCastConstraints",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	AbstractZ *z1 = [[AbstractBase alloc] init:12];
	int i = [AbstractZImpl toFoo:z1];
	[self eq:12 v2:i pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"685",@"unit.TestType",@"testAbstractCastConstraints",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:YES pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"686",@"unit.TestType",@"testAbstractCastConstraints",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testOpArrow{
	
	IntMap *m = [[IntMap alloc] init];
	
	Map *map = ((Map)($this:(snd ctx.path)) 
	IntMap *_g = [[IntMap alloc] init]
	[_g set-TAbstract]
	[_g set-TAbstract]
	__r__ = _g
	return __r__{
		
		Map* __r__}
	}(self));
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TAbstract(Map,[TAbstract(Int,[]),TAbstract(Int,[])])" v2:(NSMutableString*)@"TAbstract(Map,[TAbstract(Int,[]),TAbstract(Int,[])])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"694",@"unit.TestType",@"testOpArrow",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	[self t:[Std is:map t:IntMap] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"695",@"unit.TestType",@"testOpArrow",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[map get-TAbstract] v2:2 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"696",@"unit.TestType",@"testOpArrow",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[map get-TAbstract] v2:4 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"697",@"unit.TestType",@"testOpArrow",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	StringMap *m1 = [[StringMap alloc] init];
	
	Map *map1 = ((Map)($this:(snd ctx.path)) 
	StringMap *_g1 = [[StringMap alloc] init]
	[_g1 set-TAbstract]
	[_g1 set-TAbstract]
	__r__2 = _g1
	return __r__2{
		
		Map* __r__2}
	}(self));
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TAbstract(Map,[TInst(String,[]),TAbstract(Int,[])])" v2:(NSMutableString*)@"TAbstract(Map,[TInst(String,[]),TAbstract(Int,[])])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"701",@"unit.TestType",@"testOpArrow",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	[self t:[Std is:map1 t:StringMap] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"702",@"unit.TestType",@"testOpArrow",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[map1 get-TAbstract] v2:2 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"703",@"unit.TestType",@"testOpArrow",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[map1 get-TAbstract] v2:4 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"704",@"unit.TestType",@"testOpArrow",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	ClassWithHashCode *a = [[ClassWithHashCode alloc] init:1];
	
	ClassWithHashCode *b = [[ClassWithHashCode alloc] init:2];
	
	HashMap *m2 = [HashMapImpl _new];
	
	Map *map2 = ((Map)($this:(snd ctx.path)) 
	HashMap *_g2 = [HashMapImpl _new]
	{
		[_g2 keys.set:[a hashCode] value:a];
		[_g2 values.set:[a hashCode] value:2];
	}
	{
		[_g2 keys.set:[b hashCode] value:b];
		[_g2 values.set:[b hashCode] value:4];
	}
	__r__3 = _g2
	return __r__3{
		
		Map* __r__3}
	}(self));
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TAbstract(Map,[TInst(unit.ClassWithHashCode,[]),TAbstract(Int,[])])" v2:(NSMutableString*)@"TAbstract(Map,[TInst(unit.ClassWithHashCode,[]),TAbstract(Int,[])])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"710",@"unit.TestType",@"testOpArrow",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	[self eq:[map2 values.get:[a hashCode]] v2:2 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"712",@"unit.TestType",@"testOpArrow",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[map2 values.get:[b hashCode]] v2:4 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"713",@"unit.TestType",@"testOpArrow",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:YES pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"716",@"unit.TestType",@"testOpArrow",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:YES pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"718",@"unit.TestType",@"testOpArrow",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:YES pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"720",@"unit.TestType",@"testOpArrow",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testAbstractGeneric{
	
	StringMap *map = [[StringMap alloc] init];
	[map set-TAbstract];
	[self t:[Std is:map t:StringMap] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"726",@"unit.TestType",@"testAbstractGeneric",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	IntMap *map1 = [[IntMap alloc] init];
	[TestType _mapMe:map1];
	[self t:[Std is:map1 t:IntMap] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"730",@"unit.TestType",@"testAbstractGeneric",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	HashMap *map2 = [HashMapImpl _new];
	
	ClassWithHashCode *a = [[ClassWithHashCode alloc] init:1];
	
	ClassWithHashCode *b = [[ClassWithHashCode alloc] init:2];
	{
		[map2 keys.set:[a hashCode] value:a];
		[map2 values.set:[a hashCode] value:(NSMutableString*)@"foo"];
	}
	{
		[map2 keys.set:[b hashCode] value:b];
		[map2 values.set:[b hashCode] value:(NSMutableString*)@"bar"];
	}
	[self eq:[map2 values.get:[a hashCode]] v2:(NSMutableString*)@"foo" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"737",@"unit.TestType",@"testAbstractGeneric",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[map2 values.get:[b hashCode]] v2:(NSMutableString*)@"bar" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"738",@"unit.TestType",@"testAbstractGeneric",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	ObjectMap *map3 = [[ObjectMap alloc] init:nil];
	
	ClassWithoutHashCode *a1 = [[ClassWithoutHashCode alloc] init:1];
	
	ClassWithoutHashCode *b1 = [[ClassWithoutHashCode alloc] init:2];
	[map3 set-TAbstract];
	[map3 set-TAbstract];
	[self eq:[map3 get-TAbstract] v2:(NSMutableString*)@"foo" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"746",@"unit.TestType",@"testAbstractGeneric",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[map3 get-TAbstract] v2:(NSMutableString*)@"bar" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"747",@"unit.TestType",@"testAbstractGeneric",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testAbstractOverload{
	
	MyString *ms1 = (NSMutableString*)@"foo";
	
	MyString *ms2 = (NSMutableString*)@"bar";
	
	MyString *msum = [Std string:ms1] + [Std string:ms2];
	[self eq:msum v2:(NSMutableString*)@"foobar" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"772",@"unit.TestType",@"testAbstractOverload",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TAbstract(unit.MyString,[])" v2:(NSMutableString*)@"TAbstract(unit.MyString,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"773",@"unit.TestType",@"testAbstractOverload",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	[self t:[Std is:msum t:NSMutableString] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"774",@"unit.TestType",@"testAbstractOverload",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	MyString *msum2 = [Std string:ms1] + 1;
	[self eq:msum2 v2:(NSMutableString*)@"foo1" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"777",@"unit.TestType",@"testAbstractOverload",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TAbstract(unit.MyString,[])" v2:(NSMutableString*)@"TAbstract(unit.MyString,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"778",@"unit.TestType",@"testAbstractOverload",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	[self t:[Std is:msum2 t:NSMutableString] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"779",@"unit.TestType",@"testAbstractOverload",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:YES pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"782",@"unit.TestType",@"testAbstractOverload",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:YES pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"784",@"unit.TestType",@"testAbstractOverload",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testAbstractUnop{
	
	MyVector *vec = [[MyPoint3 alloc] init:1 y:2 z:3];
	
	MyVector *vec2 = (MyVector*)[[MyPoint3 alloc] init:-vec x y:-vec y z:-vec z];
	[self t:vec2 != vec pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"790",@"unit.TestType",@"testAbstractUnop",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[[[[[[(NSMutableString*)@"(" stringByAppendingString:vec x] stringByAppendingString:(NSMutableString*)@","] stringByAppendingString:vec y] stringByAppendingString:(NSMutableString*)@","] stringByAppendingString:vec z] stringByAppendingString:(NSMutableString*)@")"] v2:(NSMutableString*)@"(1,2,3)" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"791",@"unit.TestType",@"testAbstractUnop",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[[[[[[(NSMutableString*)@"(" stringByAppendingString:vec2 x] stringByAppendingString:(NSMutableString*)@","] stringByAppendingString:vec2 y] stringByAppendingString:(NSMutableString*)@","] stringByAppendingString:vec2 z] stringByAppendingString:(NSMutableString*)@")"] v2:(NSMutableString*)@"(-1,-2,-3)" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"792",@"unit.TestType",@"testAbstractUnop",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	MyInt2 *my = (MyInt2*)12;
	[self eq:[MyInt2Impl get:(MyInt2*)-my] v2:-12 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"795",@"unit.TestType",@"testAbstractUnop",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	{
		Test.count++;
		[self eq:(NSMutableString*)@"TAbstract(unit.MyInt2,[])" v2:(NSMutableString*)@"TAbstract(unit.MyInt2,[])" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"796",@"unit.TestType",@"testAbstractUnop",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	}
	++my;
	[self eq:[MyInt2Impl get:my] v2:13 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"798",@"unit.TestType",@"testAbstractUnop",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:YES pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"800",@"unit.TestType",@"testAbstractUnop",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:YES pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"802",@"unit.TestType",@"testAbstractUnop",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testMapComprehension{
	
	Map *map = ((Map)($this:(snd ctx.path)) 
	StringMap *_g = [[StringMap alloc] init]
	{
		int _g1 = 0; 
		NSMutableArray *_g2 = [[NSMutableArray alloc] initWithObjects:(NSMutableString*)@"a", (NSMutableString*)@"b", nil];
		while (_g1 < _g2.length) {
			
			NSMutableString *x = [_g2 objectAtIndex:_g1];
			++_g1;
			[_g set-TAbstract];
		}
	}
	__r__ = _g
	return __r__{
		
		Map* __r__}
	}(self));
	[self t:[map exists-TAbstract] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"807",@"unit.TestType",@"testMapComprehension",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:[map exists-TAbstract] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"808",@"unit.TestType",@"testMapComprehension",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[map get-TAbstract] v2:(NSMutableString*)@"A" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"809",@"unit.TestType",@"testMapComprehension",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[map get-TAbstract] v2:(NSMutableString*)@"B" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"810",@"unit.TestType",@"testMapComprehension",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testCustomArrayAccess{
	id obj = struct {
	foo:12; bar:(NSMutableString*)@"test"
	} structName;
	
	MyReflect *mr = obj;
	[self eq:[Reflect field:mr field:(NSMutableString*)@"foo"] v2:12 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"819",@"unit.TestType",@"testCustomArrayAccess",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[Reflect field:mr field:(NSMutableString*)@"bar"] v2:(NSMutableString*)@"test" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"820",@"unit.TestType",@"testCustomArrayAccess",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	{
		if (mr != nil) [mr __SetField-TDynamic-];
		11;
	}
	[self eq:[Reflect field:mr field:(NSMutableString*)@"foo"] v2:11 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"822",@"unit.TestType",@"testCustomArrayAccess",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	{
		id value = [Reflect field:mr field:(NSMutableString*)@"foo"] + 99;
		if (mr != nil) [mr __SetField-TDynamic-];
		value;
	}
	[self eq:[Reflect field:mr field:(NSMutableString*)@"foo"] v2:110 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"824",@"unit.TestType",@"testCustomArrayAccess",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	{
		id value = ((id)($this:(snd ctx.path)) id value = [Reflect field:mr field:(NSMutableString*)@"bar"] + [Reflect field:mr field:(NSMutableString*)@"foo"]
		if (mr != nil) [mr __SetField-TDynamic-]
		__r__ = value
		return __r__{
			
			id* __r__}
		}(self));
		if (mr != nil) [mr __SetField-TDynamic-];
		value;
	}
	[self eq:[Reflect field:mr field:(NSMutableString*)@"baz"] v2:(NSMutableString*)@"test110" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"826",@"unit.TestType",@"testCustomArrayAccess",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[Reflect field:mr field:(NSMutableString*)@"bar"] v2:(NSMutableString*)@"test110" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"827",@"unit.TestType",@"testCustomArrayAccess",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	NSMutableString *v = (NSMutableString*)@"hh";
	{
		if (mr != nil) [mr __SetField-TDynamic-];
		1;
	}
	{
		if (mr != nil) [mr __SetField-TDynamic-];
		2;
	}
	[self eq:[Reflect field:mr field:(NSMutableString*)@"hhh"] v2:2 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"832",@"unit.TestType",@"testCustomArrayAccess",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:v v2:(NSMutableString*)@"hhh" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"833",@"unit.TestType",@"testCustomArrayAccess",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	{
		if (mr != nil) [mr __SetField-TDynamic-];
		0;
	}
	{
		
		NSMutableString *_g = [v appendString:(NSMutableString*)@"h"];
		{
			id value = [Reflect field:mr field:_g] + 4;
			if (mr != nil) [mr __SetField-TDynamic-];
			value;
		}
	}
	[self eq:[Reflect field:mr field:(NSMutableString*)@"hhhh"] v2:4 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"837",@"unit.TestType",@"testCustomArrayAccess",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[Reflect field:mr field:(NSMutableString*)@"hhh"] v2:2 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"838",@"unit.TestType",@"testCustomArrayAccess",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:v v2:(NSMutableString*)@"hhhh" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"839",@"unit.TestType",@"testCustomArrayAccess",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	{
		id value = ((SEL)($this:(snd ctx.path)) SEL n = ^- (int) :(int)x{
			return 9 + x;
		}
		__r__2 = n
		return __r__2{
			
			SEL* __r__2}
		}(self));
		if (mr != nil) [mr __SetField-TDynamic-];
		value;
	}
	[self eq:[[Reflect field:mr field:(NSMutableString*)@"101"]-TDynamic-] v2:10 pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"843",@"unit.TestType",@"testCustomArrayAccess",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testAbstractClosure{
	
	MyAbstractClosure *s = [MyAbstractClosureImpl _new:(NSMutableString*)@"foo"];
	SEL func1 = [MyAbstractClosureImpl test:s];
	[self eq:[func1] v2:(NSMutableString*)@"foo" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"849",@"unit.TestType",@"testAbstractClosure",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	s = (NSMutableString*)@"bar";
	[self eq:[func1] v2:(NSMutableString*)@"foo" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"851",@"unit.TestType",@"testAbstractClosure",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:[[MyAbstractClosureImpl test:s]] v2:(NSMutableString*)@"bar" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestType.hx",@"852",@"unit.TestType",@"testAbstractClosure",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (id) init{
	self = [super init];
	[super];
	return self;
}

@end
