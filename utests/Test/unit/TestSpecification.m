//
//  TestSpecification
//  Test
//
//  Source generated by Haxe Objective-C target
//

#import "../unit/TestSpecification.h"

@implementation C

+ (void) staticFunc{
}
+ (NSMutableString*) staticVar:(NSMutableString*)val {
	static NSMutableString *_val;
	if (val == nil) { if (_val == nil) _val = ; }
	else { if (_val != nil) _val = val; }
	return _val;
}
+ (NSMutableString*) staticProp:(NSMutableString*)val {
	static NSMutableString *_val;
	if (val == nil) { if (_val == nil) _val = ; }
	else { if (_val != nil) _val = val; }
	return _val;
}
- (void) func{
}
@synthesize v;
@synthesize prop;
- (id) init{
	self = [super init];
	self.v = (NSMutableString*)@"var";
	self.prop = (NSMutableString*)@"prop";
	C.staticVar = (NSMutableString*)@"staticVar";
	C.staticProp = (NSMutableString*)@"staticProp";
	return self;
}

@end

@implementation CChild

- (id) init{
	self = [super init];
	[super];
	return self;
}

@end

@implementation CDyn

- (id) init{
	self = [super init];
	[super];
	return self;
}

@end

@implementation EmptyClass

- (id) init{
	self = [super init];
	return self;
}

@end

@implementation ClassWithToString

- (NSMutableString*) toString{
	return (NSMutableString*)@"ClassWithToString.toString()";
}
- (id) init{
	self = [super init];
	return self;
}

@end

@implementation ClassWithToStringChild

- (id) init{
	self = [super init];
	[super];
	return self;
}

@end

@implementation ClassWithToStringChild2

- (NSMutableString*) toString{
	return (NSMutableString*)@"ClassWithToStringChild2.toString()";
}
- (id) init{
	self = [super init];
	[super];
	return self;
}

@end

@implementation ClassWithCtorDefaultValues

@synthesize a;
@synthesize b;
- (id) init:(int)a b:(NSMutableString*)b{
	self = [super init];
	// Simulated optional arguments
	if (b == nil) b = (NSMutableString*)@"foo";
	if (a == nil) a = 1;
	
	self.a = a;
	self.b = b;
	return self;
}

@end

@implementation ClassWithCtorDefaultValuesChild

- (id) init:(int)a b:(NSMutableString*)b{
	self = [super init];
	// Simulated optional arguments
	if (b == nil) b = nil;
	if (a == nil) a = nil;
	
	[super-TInst];
	return self;
}

@end

@implementation IntWrap

+ (int) compare:(IntWrap*)a b:(IntWrap*)b{
	return ( (a.i == b.i) ? 0 : ( (a.i > b.i) ? 1 : -1));
}
@synthesize i;
- (id) init:(int)i{
	self = [super init];
	self.i = i;
	return self;
}

@end

@implementation TestSpecification

- (id) init{
	self = [super init];
	[super];
	return self;
}

@end
