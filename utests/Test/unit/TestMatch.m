//
//  TestMatch
//  Test
//
//  Source generated by Haxe Objective-C target
//

#import "../unit/TestMatch.h"

@implementation TestMatch

+ (NSMutableString*) switchNormal:(id)e{
	return ^(NSMutableString*)
	var $e2 : enum =  (e expr)
	switch ( $e2.index ) {
		
		case 0:
		
		var MATCH e_fexpr_eEConst_0 : Expr = $e2.params[0]{
			__r__ = ^(NSMutableString*)
			var $e4 : enum =  (e_fexpr_eEConst_0)
			switch ( $e4.index ) {
				
				case 2:
				
				var MATCH e_fexpr_eEConst_0_eCString_0 : NSMutableString = $e4.params[0]{
					__r__3 = e_fexpr_eEConst_0_eCString_0}break
				default:{
					__r__3 = (NSMutableString*)@"not_found"}break
			}
			return __r__3{
				
				NSMutableString* __r__3}
			}()}break
		case 4:
		
		var MATCH e_fexpr_eEParenthesis_0 : id = $e2.params[0]{
			__r__ = ^(NSMutableString*)
			var $e6 : enum =  (e_fexpr_eEParenthesis_0 expr)
			switch ( $e6.index ) {
				
				case 0:
				
				var MATCH e_fexpr_eEParenthesis_0_fexpr_eEConst_0 : Expr = $e6.params[0]{
					__r__5 = ^(NSMutableString*)
					var $e8 : enum =  (e_fexpr_eEParenthesis_0_fexpr_eEConst_0)
					switch ( $e8.index ) {
						
						case 2:
						
						var MATCH e_fexpr_eEParenthesis_0_fexpr_eEConst_0_eCString_0 : NSMutableString = $e8.params[0]{
							__r__7 = e_fexpr_eEParenthesis_0_fexpr_eEConst_0_eCString_0}break
						default:{
							__r__7 = (NSMutableString*)@"not_found"}break
					}
					return __r__7{
						
						NSMutableString* __r__7}
					}()}break
				default:{
					__r__5 = (NSMutableString*)@"not_found"}break
			}
			return __r__5{
				
				NSMutableString* __r__5}
			}()}break
		case 22:
		
		var MATCH e_fexpr_eEUntyped_0 : id = $e2.params[0]{
			__r__ = ^(NSMutableString*)
			var $e10 : enum =  (e_fexpr_eEUntyped_0 expr)
			switch ( $e10.index ) {
				
				case 0:
				
				var MATCH e_fexpr_eEUntyped_0_fexpr_eEConst_0 : Expr = $e10.params[0]{
					__r__9 = ^(NSMutableString*)
					var $e12 : enum =  (e_fexpr_eEUntyped_0_fexpr_eEConst_0)
					switch ( $e12.index ) {
						
						case 2:
						
						var MATCH e_fexpr_eEUntyped_0_fexpr_eEConst_0_eCString_0 : NSMutableString = $e12.params[0]{
							__r__11 = e_fexpr_eEUntyped_0_fexpr_eEConst_0_eCString_0}break
						default:{
							__r__11 = (NSMutableString*)@"not_found"}break
					}
					return __r__11{
						
						NSMutableString* __r__11}
					}()}break
				default:{
					__r__9 = (NSMutableString*)@"not_found"}break
			}
			return __r__9{
				
				NSMutableString* __r__9}
			}()}break
		case 3:
		
		var MATCH e_fexpr_eEField_1 : NSMutableString = $e2.params[1]{
			__r__ = e_fexpr_eEField_1}break
		case 1:
		
		var MATCH e_fexpr_eEArray_1 : id = $e2.params[1], MATCH e_fexpr_eEArray_0 : id = $e2.params[0]{
			__r__ = ^(NSMutableString*)
			var $e14 : enum =  (e_fexpr_eEArray_1 expr)
			switch ( $e14.index ) {
				
				case 0:
				
				var MATCH e_fexpr_eEArray_1_fexpr_eEConst_0 : Expr = $e14.params[0]{
					__r__13 = ^(NSMutableString*)
					var $e16 : enum =  (e_fexpr_eEArray_1_fexpr_eEConst_0)
					switch ( $e16.index ) {
						
						case 0:
						
						case 1:
						
						var MATCH e_fexpr_eEArray_1_fexpr_eEConst_0_eCInt_0 : NSMutableString = $e16.params[0]{
							__r__15 = [Std string:e_fexpr_eEArray_1_fexpr_eEConst_0_eCInt_0]}break
						default:{
							__r__15 = (NSMutableString*)@"not_found"}break
					}
					return __r__15{
						
						NSMutableString* __r__15}
					}()}break
				default:{
					__r__13 = (NSMutableString*)@"not_found"}break
			}
			return __r__13{
				
				NSMutableString* __r__13}
			}()}break
		case 14:
		
		var MATCH e_fexpr_eEIn_1 : id = $e2.params[1]{
			__r__ = [Std string:e_fexpr_eEIn_1 expr]}break
		default:{
			__r__ = (NSMutableString*)@"not_found"}break
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (Expr*) switchCapture:(id)e{
	return ^(Expr*)
	var $e2 : enum =  (e expr)
	switch ( $e2.index ) {
		
		case 0:
		
		var MATCH e_fexpr_eEConst_0 : Expr = $e2.params[0]{
			__r__ = ^(Expr*)
			var $e4 : enum =  (e_fexpr_eEConst_0)
			switch ( $e4.index ) {
				
				case 2:
				
				var MATCH e_fexpr_eEConst_0_eCString_0 : NSMutableString = $e4.params[0]{
					__r__3 = ^(Expr*)switch (e_fexpr_eEConst_0_eCString_0){
						case (NSMutableString*)@"foobar":{
							__r__5 = e_fexpr_eEConst_0}break;
						default:{
							__r__5 = nil}break;
					}
					return __r__5{
						
						Expr* __r__5}
					}()}break
				case 0:
				
				var MATCH e_fexpr_eEConst_0_eCInt_0 : NSMutableString = $e4.params[0]{
					__r__3 = ^(Expr*)switch (e_fexpr_eEConst_0_eCInt_0){
						case (NSMutableString*)@"9":{
							__r__6 = e_fexpr_eEConst_0}break;
						default:{
							__r__6 = nil}break;
					}
					return __r__6{
						
						Expr* __r__6}
					}()}break
				default:{
					__r__3 = nil}break
			}
			return __r__3{
				
				Expr* __r__3}
			}()}break
		default:{
			__r__ = nil}break
	}
	return __r__{
		
		Expr* __r__}
	}();
}
+ (NSMutableString*) switchArray:(id)e{
	return ^(NSMutableString*)
	var $e2 : enum =  (e expr)
	switch ( $e2.index ) {
		
		case 6:
		
		var MATCH e_fexpr_eEArrayDecl_0 : NSMutableArray = $e2.params[0]{
			__r__ = ^(NSMutableString*)switch (e_fexpr_eEArrayDecl_0.length){
				case 0:{
					__r__3 = (NSMutableString*)@"[]"}break;
				case 1:{
					__r__3 = [[(NSMutableString*)@"[" stringByAppendingString:[Std string:[e_fexpr_eEArrayDecl_0 objectAtIndex:@"0"] expr]] stringByAppendingString:(NSMutableString*)@"]"]}break;
				case 2:{
					__r__3 = [[[[(NSMutableString*)@"[" stringByAppendingString:[Std string:[e_fexpr_eEArrayDecl_0 objectAtIndex:@"0"] expr]] stringByAppendingString:(NSMutableString*)@","] stringByAppendingString:[Std string:[e_fexpr_eEArrayDecl_0 objectAtIndex:@"1"] expr]] stringByAppendingString:(NSMutableString*)@"]"]}break;
				default:{
					__r__3 = (NSMutableString*)@"_"}break;
			}
			return __r__3{
				
				NSMutableString* __r__3}
			}()}break
		default:{
			__r__ = (NSMutableString*)@"_"}break
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (NSMutableString*) switchArray2:(NSMutableArray*)a{
	return ^(NSMutableString*)switch (a.length){
		case 2:{
			__r__ = ^(NSMutableString*)switch ([a objectAtIndex:0]){
				case (NSMutableString*)@"a":{
					__r__2 = ^(NSMutableString*)switch ([a objectAtIndex:1]){
						case (NSMutableString*)@"b":{
							__r__3 = (NSMutableString*)@"0"}break;
						default:{
							__r__3 = [[[(NSMutableString*)@"4:" stringByAppendingString:[a objectAtIndex:@"0"]] stringByAppendingString:(NSMutableString*)@","] stringByAppendingString:[a objectAtIndex:@"1"]]}break;
					}
					return __r__3{
						
						NSMutableString* __r__3}
					}()}break;
				default:{
					__r__2 = [[[(NSMutableString*)@"4:" stringByAppendingString:[a objectAtIndex:@"0"]] stringByAppendingString:(NSMutableString*)@","] stringByAppendingString:[a objectAtIndex:@"1"]]}break;
			}
			return __r__2{
				
				NSMutableString* __r__2}
			}()}break;
		case 1:{
			__r__ = ^(NSMutableString*)switch ([a objectAtIndex:0]){
				case (NSMutableString*)@"a":{
					__r__4 = (NSMutableString*)@"1"}break;
				case (NSMutableString*)@"b":{
					__r__4 = (NSMutableString*)@"2"}break;
				default:{
					__r__4 = [(NSMutableString*)@"3:" stringByAppendingString:[a objectAtIndex:@"0"]]}break;
			}
			return __r__4{
				
				NSMutableString* __r__4}
			}()}break;
		case 0:{
			__r__ = ( (a.length == 3) ? [(NSMutableString*)@"5:" stringByAppendingString:a.length] : (NSMutableString*)@"6")}break;
		default:{
			__r__ = ( (a.length == 3) ? [(NSMutableString*)@"5:" stringByAppendingString:a.length] : (NSMutableString*)@"7")}break;
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (NSMutableString*) switchStructure:(id)a{
	return ^(NSMutableString*)switch (a foo){
		case (NSMutableString*)@"val1":{
			__r__ = ^(NSMutableString*)switch (a bar){
				case (NSMutableString*)@"val2":{
					__r__2 = (NSMutableString*)@"0"}break;
				default:{
					__r__2 = (NSMutableString*)@"1"}break;
			}
			return __r__2{
				
				NSMutableString* __r__2}
			}()}break;
		default:{
			__r__ = ^(NSMutableString*)switch (a bar){
				case (NSMutableString*)@"val2":{
					__r__3 = (NSMutableString*)@"2"}break;
				default:{
					__r__3 = a bar}break;
			}
			return __r__3{
				
				NSMutableString* __r__3}
			}()}break;
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (NSMutableString*) switchCrazy:(id)e{
	return ^(NSMutableString*)
	var $e2 : enum =  (e expr)
	switch ( $e2.index ) {
		
		case 22:
		
		var MATCH e_fexpr_eEUntyped_0 : id = $e2.params[0]{
			__r__ = ^(NSMutableString*)
			var $e4 : enum =  (e_fexpr_eEUntyped_0 expr)
			switch ( $e4.index ) {
				
				case 4:
				
				var MATCH e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0 : id = $e4.params[0]{
					__r__3 = ^(NSMutableString*)
					var $e6 : enum =  (e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0 expr)
					switch ( $e6.index ) {
						
						case 1:
						
						var MATCH e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_1 : id = $e6.params[1], MATCH e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_0 : id = $e6.params[0]{
							__r__5 = ^(NSMutableString*)
							var $e8 : enum =  (e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_0 expr)
							switch ( $e8.index ) {
								
								case 0:
								
								var MATCH e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_0_fexpr_eEConst_0 : Expr = $e8.params[0]{
									__r__7 = ^(NSMutableString*)
									var $e10 : enum =  (e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_0_fexpr_eEConst_0)
									switch ( $e10.index ) {
										
										case 2:
										
										var MATCH e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_0_fexpr_eEConst_0_eCString_0 : NSMutableString = $e10.params[0]{
											__r__9 = ^(NSMutableString*)
											var $e12 : enum =  (e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_1 expr)
											switch ( $e12.index ) {
												
												case 0:
												
												var MATCH e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_1_fexpr_eEConst_0 : Expr = $e12.params[0]{
													__r__11 = ^(NSMutableString*)
													var $e14 : enum =  (e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_1_fexpr_eEConst_0)
													switch ( $e14.index ) {
														
														case 0:
														
														var MATCH e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_1_fexpr_eEConst_0_eCInt_0 : NSMutableString = $e14.params[0]{
															__r__13 = [[[Std string:e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_0 expr] stringByAppendingString:(NSMutableString*)@":"] stringByAppendingString:e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_1_fexpr_eEConst_0_eCInt_0]}break
														default:{
															__r__13 = (NSMutableString*)@"_"}break
													}
													return __r__13{
														
														NSMutableString* __r__13}
													}()}break
												default:{
													__r__11 = (NSMutableString*)@"_"}break
											}
											return __r__11{
												
												NSMutableString* __r__11}
											}()}break
										default:{
											__r__9 = (NSMutableString*)@"_"}break
									}
									return __r__9{
										
										NSMutableString* __r__9}
									}()}break
								default:{
									__r__7 = (NSMutableString*)@"_"}break
							}
							return __r__7{
								
								NSMutableString* __r__7}
							}()}break
						default:{
							__r__5 = (NSMutableString*)@"_"}break
					}
					return __r__5{
						
						NSMutableString* __r__5}
					}()}break
				default:{
					__r__3 = (NSMutableString*)@"_"}break
			}
			return __r__3{
				
				NSMutableString* __r__3}
			}()}break
		default:{
			__r__ = (NSMutableString*)@"_"}break
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (NSMutableString*) switchGuard:(id)e{
	return ^(NSMutableString*)
	var $e2 : enum =  (e expr)
	switch ( $e2.index ) {
		
		case 0:
		
		var MATCH e_fexpr_eEConst_0 : Expr = $e2.params[0]{
			__r__ = ^(NSMutableString*)
			var $e4 : enum =  (e_fexpr_eEConst_0)
			switch ( $e4.index ) {
				
				case 2:
				
				var MATCH e_fexpr_eEConst_0_eCString_0 : NSMutableString = $e4.params[0]{
					__r__3 = ( ([StringTools startsWith:e_fexpr_eEConst_0_eCString_0 start:(NSMutableString*)@"foo"]) ? (NSMutableString*)@"1" : ( ([StringTools startsWith:e_fexpr_eEConst_0_eCString_0 start:(NSMutableString*)@"bar"]) ? (NSMutableString*)@"2" : (NSMutableString*)@"4"))}break
				case 0:
				
				var MATCH e_fexpr_eEConst_0_eCInt_0 : NSMutableString = $e4.params[0]{
					__r__3 = ( (^(BOOL)int _g = [Std parseInt:e_fexpr_eEConst_0_eCInt_0] * 2
					__r__5 = ^(id)switch (_g){
						case 4:{
							__r__6 = YES}break;
						default:{
							__r__6 = NO}break;
					}
					return __r__6{
						
						id* __r__6}
					}()
					return __r__5{
						
						BOOL* __r__5}
					}()) ? (NSMutableString*)@"3" : (NSMutableString*)@"4")}break
				default:{
					__r__3 = (NSMutableString*)@"4"}break
			}
			return __r__3{
				
				NSMutableString* __r__3}
			}()}break
		default:{
			__r__ = (NSMutableString*)@"5"}break
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (NSMutableString*) switchClass:(Class*)cl{
	return ^(NSMutableString*)switch (cl){
		case NSMutableString:{
			__r__ = (NSMutableString*)@"String"}break;
		case MyClass:{
			__r__ = (NSMutableString*)@"unit.MyClass"}break;
		default:{
			__r__ = [(NSMutableString*)@"other: " stringByAppendingString:[Type getClassName:cl]]}break;
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (NSMutableString*) toStringX:(TestMatch*)x1{
	return ^(NSMutableString*)
	var $e2 : enum =  (x1)
	switch ( $e2.index ) {
		
		case 0:
		
		var MATCH x1_eU1_0 : int = $e2.params[0]{
			__r__ = ( (x1_eU1_0 > 1) ? (NSMutableString*)@">1" : ( (x1_eU1_0 <= 1) ? (NSMutableString*)@"<=1" : ^(NSMutableString*)@throw (NSMutableString*)@"this is impossible to reach actually";
			return __r__3{
				
				NSMutableString* __r__3}
			}()))}break
		case 1:
		{
			__r__ = (NSMutableString*)@"U2"}break
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
- (void) testBasic{
	[self eq:(NSMutableString*)@"bar" v2:[TestMatch switchNormal:(id)struct {
	expr:FEnum[ EConst:FEnum[ CString:(NSMutableString*)@"bar"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:2832; max:2837
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"123",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"bar" v2:[TestMatch switchNormal:(id)struct {
	expr:FEnum[ EParenthesis:struct {
	expr:FEnum[ EConst:FEnum[ CString:(NSMutableString*)@"bar"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:2874; max:2879
	} structName
	} structName]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:2873; max:2880
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"124",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"bar" v2:[TestMatch switchNormal:(id)struct {
	expr:FEnum[ EUntyped:struct {
	expr:FEnum[ EConst:FEnum[ CString:(NSMutableString*)@"bar"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:2924; max:2929
	} structName
	} structName]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:2916; max:2929
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"125",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"foo" v2:[TestMatch switchNormal:(id)struct {
	expr:FEnum[ EField:struct {
	expr:FEnum[ EConst:FEnum[ CIdent:(NSMutableString*)@"null"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:2965; max:2969
	} structName
	} structName field:(NSMutableString*)@"foo"]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:2965; max:2973
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"126",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"22" v2:[TestMatch switchNormal:(id)struct {
	expr:FEnum[ EArray:struct {
	expr:FEnum[ EConst:FEnum[ CIdent:(NSMutableString*)@"null"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:3008; max:3012
	} structName
	} structName e2:struct {
	expr:FEnum[ EConst:FEnum[ CInt:(NSMutableString*)@"22"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:3013; max:3015
	} structName
	} structName]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:3008; max:3016
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"127",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"22.5" v2:[TestMatch switchNormal:(id)struct {
	expr:FEnum[ EArray:struct {
	expr:FEnum[ EConst:FEnum[ CIdent:(NSMutableString*)@"null"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:3053; max:3057
	} structName
	} structName e2:struct {
	expr:FEnum[ EConst:FEnum[ CFloat:(NSMutableString*)@"22.5"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:3058; max:3062
	} structName
	} structName]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:3053; max:3063
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"128",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"EConst(CInt(0))" v2:[TestMatch switchNormal:(id)struct {
	expr:FEnum[ EIn:struct {
	expr:FEnum[ EConst:FEnum[ CInt:(NSMutableString*)@"1"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:3111; max:3112
	} structName
	} structName e2:struct {
	expr:FEnum[ EConst:FEnum[ CInt:(NSMutableString*)@"0"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:3116; max:3117
	} structName
	} structName]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:3111; max:3117
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"129",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"not_found" v2:[TestMatch switchNormal:(id)struct {
	expr:FEnum[ EArray:struct {
	expr:FEnum[ EConst:FEnum[ CIdent:(NSMutableString*)@"null"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:3159; max:3163
	} structName
	} structName e2:struct {
	expr:FEnum[ EConst:FEnum[ CString:(NSMutableString*)@"22"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:3164; max:3168
	} structName
	} structName]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:3159; max:3169
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"130",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:nil != [TestMatch switchCapture:(id)struct {
	expr:FEnum[ EConst:FEnum[ CString:(NSMutableString*)@"foobar"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:3208; max:3216
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"132",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:nil == [TestMatch switchCapture:(id)struct {
	expr:FEnum[ EConst:FEnum[ CString:(NSMutableString*)@"fooba"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:3253; max:3260
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"133",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:nil != [TestMatch switchCapture:(id)struct {
	expr:FEnum[ EConst:FEnum[ CInt:(NSMutableString*)@"9"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:3297; max:3298
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"134",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self t:nil == [TestMatch switchCapture:(id)struct {
	expr:FEnum[ EConst:FEnum[ CInt:(NSMutableString*)@"10"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:3335; max:3337
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"135",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"[]" v2:[TestMatch switchArray:(id)struct {
	expr:FEnum[ EArrayDecl:[[NSMutableArray alloc] initWithObjects:, nil]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:3373; max:3375
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"137",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"_" v2:[TestMatch switchArray:(id)struct {
	expr:FEnum[ EConst:FEnum[ CInt:(NSMutableString*)@"2"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:3408; max:3409
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"138",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"[EConst(CInt(22))]" v2:[TestMatch switchArray:(id)struct {
	expr:FEnum[ EArrayDecl:[[NSMutableArray alloc] initWithObjects:struct {
	expr:FEnum[ EConst:FEnum[ CInt:(NSMutableString*)@"22"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:[NSNumber numberWithInt:3460]; max:[NSNumber numberWithInt:3462]
	} structName
	} structName, nil]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:3459; max:3463
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"139",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"[EConst(CInt(22)),EConst(CString(foo))]" v2:[TestMatch switchArray:(id)struct {
	expr:FEnum[ EArrayDecl:[[NSMutableArray alloc] initWithObjects:struct {
	expr:FEnum[ EConst:FEnum[ CInt:(NSMutableString*)@"22"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:[NSNumber numberWithInt:3535]; max:[NSNumber numberWithInt:3537]
	} structName
	} structName, struct {
	expr:FEnum[ EConst:FEnum[ CString:(NSMutableString*)@"foo"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:[NSNumber numberWithInt:3538]; max:[NSNumber numberWithInt:3543]
	} structName
	} structName, nil]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:3534; max:3544
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"140",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"_" v2:[TestMatch switchArray:(id)struct {
	expr:FEnum[ EArrayDecl:[[NSMutableArray alloc] initWithObjects:struct {
	expr:FEnum[ EConst:FEnum[ CInt:(NSMutableString*)@"22"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:[NSNumber numberWithInt:3578]; max:[NSNumber numberWithInt:3580]
	} structName
	} structName, struct {
	expr:FEnum[ EConst:FEnum[ CString:(NSMutableString*)@"foo"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:[NSNumber numberWithInt:3582]; max:[NSNumber numberWithInt:3587]
	} structName
	} structName, struct {
	expr:FEnum[ EConst:FEnum[ CString:(NSMutableString*)@"bar"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:[NSNumber numberWithInt:3589]; max:[NSNumber numberWithInt:3594]
	} structName
	} structName, nil]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:3577; max:3595
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"141",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"0" v2:[TestMatch switchArray2:[[NSMutableArray alloc] initWithObjects:(NSMutableString*)@"a", (NSMutableString*)@"b", nil]] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"143",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"1" v2:[TestMatch switchArray2:[[NSMutableArray alloc] initWithObjects:(NSMutableString*)@"a", nil]] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"144",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"2" v2:[TestMatch switchArray2:[[NSMutableArray alloc] initWithObjects:(NSMutableString*)@"b", nil]] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"145",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"3:c" v2:[TestMatch switchArray2:[[NSMutableArray alloc] initWithObjects:(NSMutableString*)@"c", nil]] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"146",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"4:a,a" v2:[TestMatch switchArray2:[[NSMutableArray alloc] initWithObjects:(NSMutableString*)@"a", (NSMutableString*)@"a", nil]] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"147",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"4:b,a" v2:[TestMatch switchArray2:[[NSMutableArray alloc] initWithObjects:(NSMutableString*)@"b", (NSMutableString*)@"a", nil]] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"148",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"5:3" v2:[TestMatch switchArray2:[[NSMutableArray alloc] initWithObjects:(NSMutableString*)@"a", (NSMutableString*)@"a", (NSMutableString*)@"a", nil]] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"149",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"6" v2:[TestMatch switchArray2:[[NSMutableArray alloc] initWithObjects:, nil]] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"150",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"7" v2:[TestMatch switchArray2:[[NSMutableArray alloc] initWithObjects:(NSMutableString*)@"a", (NSMutableString*)@"a", (NSMutableString*)@"a", (NSMutableString*)@"b", nil]] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"151",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"EConst(CString(foobar)):12" v2:[TestMatch switchCrazy:(id)struct {
	expr:FEnum[ EUntyped:struct {
	expr:FEnum[ EParenthesis:struct {
	expr:FEnum[ EArray:struct {
	expr:FEnum[ EConst:FEnum[ CString:(NSMutableString*)@"foobar"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:4008; max:4016
	} structName
	} structName e2:struct {
	expr:FEnum[ EConst:FEnum[ CInt:(NSMutableString*)@"12"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:4017; max:4019
	} structName
	} structName]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:4008; max:4020
	} structName
	} structName]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:4007; max:4021
	} structName
	} structName]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:3999; max:4021
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"153",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"1" v2:[TestMatch switchGuard:(id)struct {
	expr:FEnum[ EConst:FEnum[ CString:(NSMutableString*)@"foobar"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:4056; max:4064
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"155",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"2" v2:[TestMatch switchGuard:(id)struct {
	expr:FEnum[ EConst:FEnum[ CString:(NSMutableString*)@"barfoo"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:4097; max:4105
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"156",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"3" v2:[TestMatch switchGuard:(id)struct {
	expr:FEnum[ EConst:FEnum[ CInt:(NSMutableString*)@"2"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:4138; max:4139
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"157",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"4" v2:[TestMatch switchGuard:(id)struct {
	expr:FEnum[ EConst:FEnum[ CInt:(NSMutableString*)@"5"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:4172; max:4173
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"158",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"4" v2:[TestMatch switchGuard:(id)struct {
	expr:FEnum[ EConst:FEnum[ CString:(NSMutableString*)@"bazfoo"]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:4206; max:4214
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"159",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"5" v2:[TestMatch switchGuard:(id)struct {
	expr:FEnum[ EArrayDecl:[[NSMutableArray alloc] initWithObjects:, nil]]; pos:struct {
	file:(NSMutableString*)@"unit/TestMatch.hx"; min:4247; max:4249
	} structName
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"160",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"0" v2:((NSMutableString)($this:(snd ctx.path)) BOOL _g = YES; int _g1 = 1; 
	NSMutableString *_g2 = (NSMutableString*)@"foo"
	__r__ = ((id)($this:(snd ctx.path)) switch (_g){
		case YES:{
			__r__2 = ((id)($this:(snd ctx.path)) switch (_g1){
				case 1:{
					__r__3 = ((id)($this:(snd ctx.path)) switch (_g2){
						case (NSMutableString*)@"foo":{
							__r__4 = (NSMutableString*)@"0"}break;
						default:{
							__r__4 = (NSMutableString*)@"1"}break;
					}
					return __r__4{
						
						id* __r__4}
					}($this))}break;
				default:{
					__r__3 = (NSMutableString*)@"_"}break;
			}
			return __r__3{
				
				id* __r__3}
			}($this))}break;
		default:{
			__r__2 = (NSMutableString*)@"_"}break;
	}
	return __r__2{
		
		id* __r__2}
	}($this))
	return __r__{
		
		NSMutableString* __r__}
	}(self)) pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"162",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"0" v2:((NSMutableString)($this:(snd ctx.path)) BOOL _g3 = YES; int _g4 = 1; 
	NSMutableString *_g5 = (NSMutableString*)@"foo"
	__r__5 = ((id)($this:(snd ctx.path)) switch (_g3){
		case YES:{
			__r__6 = ((id)($this:(snd ctx.path)) switch (_g4){
				case 1:{
					__r__7 = ((id)($this:(snd ctx.path)) switch (_g5){
						case (NSMutableString*)@"foo":{
							__r__8 = (NSMutableString*)@"0"}break;
						default:{
							__r__8 = (NSMutableString*)@"1"}break;
					}
					return __r__8{
						
						id* __r__8}
					}($this))}break;
				default:{
					__r__7 = (NSMutableString*)@"_"}break;
			}
			return __r__7{
				
				id* __r__7}
			}($this))}break;
		default:{
			__r__6 = (NSMutableString*)@"_"}break;
	}
	return __r__6{
		
		id* __r__6}
	}($this))
	return __r__5{
		
		NSMutableString* __r__5}
	}(self)) pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"168",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"1" v2:((NSMutableString)($this:(snd ctx.path)) BOOL _g6 = YES; int _g7 = 1; 
	NSMutableString *_g8 = (NSMutableString*)@"bar"
	__r__9 = ((id)($this:(snd ctx.path)) switch (_g6){
		case YES:{
			__r__10 = ((id)($this:(snd ctx.path)) switch (_g7){
				case 1:{
					__r__11 = ((id)($this:(snd ctx.path)) switch (_g8){
						case (NSMutableString*)@"foo":{
							__r__12 = (NSMutableString*)@"0"}break;
						default:{
							__r__12 = (NSMutableString*)@"1"}break;
					}
					return __r__12{
						
						id* __r__12}
					}($this))}break;
				default:{
					__r__11 = (NSMutableString*)@"_"}break;
			}
			return __r__11{
				
				id* __r__11}
			}($this))}break;
		default:{
			__r__10 = (NSMutableString*)@"_"}break;
	}
	return __r__10{
		
		id* __r__10}
	}($this))
	return __r__9{
		
		NSMutableString* __r__9}
	}(self)) pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"174",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"_" v2:((NSMutableString)($this:(snd ctx.path)) BOOL _g9 = NO; int _g10 = 1; 
	NSMutableString *_g11 = (NSMutableString*)@"foo"
	__r__13 = ((id)($this:(snd ctx.path)) switch (_g9){
		case YES:{
			__r__14 = ((id)($this:(snd ctx.path)) switch (_g10){
				case 1:{
					__r__15 = ((id)($this:(snd ctx.path)) switch (_g11){
						case (NSMutableString*)@"foo":{
							__r__16 = (NSMutableString*)@"0"}break;
						default:{
							__r__16 = (NSMutableString*)@"1"}break;
					}
					return __r__16{
						
						id* __r__16}
					}($this))}break;
				default:{
					__r__15 = (NSMutableString*)@"_"}break;
			}
			return __r__15{
				
				id* __r__15}
			}($this))}break;
		default:{
			__r__14 = (NSMutableString*)@"_"}break;
	}
	return __r__14{
		
		id* __r__14}
	}($this))
	return __r__13{
		
		NSMutableString* __r__13}
	}(self)) pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"180",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"1" v2:((NSMutableString)($this:(snd ctx.path)) int _g12 = 1; int _g13 = 2
	__r__17 = ((id)($this:(snd ctx.path)) switch (_g12){
		case 0:{
			__r__18 = ((id)($this:(snd ctx.path)) switch (_g13){
				case 0:{
					__r__19 = (NSMutableString*)@"1"}break;
				default:{
					__r__19 = (NSMutableString*)@"_"}break;
			}
			return __r__19{
				
				id* __r__19}
			}($this))}break;
		case 1:{
			__r__18 = ((id)($this:(snd ctx.path)) switch (_g13){
				case 2:{
					__r__20 = (NSMutableString*)@"1"}break;
				case 1:{
					__r__20 = (NSMutableString*)@"2"}break;
				default:{
					__r__20 = (NSMutableString*)@"_"}break;
			}
			return __r__20{
				
				id* __r__20}
			}($this))}break;
		default:{
			__r__18 = (NSMutableString*)@"_"}break;
	}
	return __r__18{
		
		id* __r__18}
	}($this))
	return __r__17{
		
		NSMutableString* __r__17}
	}(self)) pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"186",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	
	TestMatch *t = FEnum[ TA:(NSMutableString*)@"foo"];
	[self eq:(NSMutableString*)@"0" v2:((NSMutableString)($this:(snd ctx.path)) 
	var $e22 : enum =  (t)
	switch ( $e22.index ) {
		
		case 0:
		
		var MATCH t_eTA_0 : id = $e22.params[0]{
			__r__21 = ((NSMutableString)($this:(snd ctx.path)) switch (t_eTA_0){
				case (NSMutableString*)@"foo":{
					__r__23 = (NSMutableString*)@"0"}break;
				default:{
					__r__23 = (NSMutableString*)@"1"}break;
			}
			return __r__23{
				
				NSMutableString* __r__23}
			}($this))}break
		case 2:
		{
			__r__21 = (NSMutableString*)@"2"}break
	}
	return __r__21{
		
		NSMutableString* __r__21}
	}(self)) pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"193",@"unit.TestMatch",@"testBasic",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testTuple{
	SEL test = ^- (NSMutableString*) :(int)a b:(int)b c:(int)c{
		return ^(NSMutableString*)switch (a){
			case 1:{
				__r__ = ^(NSMutableString*)switch (b){
					case 1:{
						__r__2 = ^(NSMutableString*)switch (c){
							case 2:{
								__r__3 = [(NSMutableString*)@"0|x:" stringByAppendingString:a]}break;
							default:{
								__r__3 = [[[(NSMutableString*)@"2|y:" stringByAppendingString:b] stringByAppendingString:(NSMutableString*)@",z:"] stringByAppendingString:c]}break;
						}
						return __r__3{
							
							NSMutableString* __r__3}
						}()}break;
					case 2:{
						__r__2 = [(NSMutableString*)@"0|x:" stringByAppendingString:c]}break;
					case 3:{
						__r__2 = ^(NSMutableString*)switch (c){
							case 2:{
								__r__4 = [(NSMutableString*)@"0|x:" stringByAppendingString:b]}break;
							case 4:{
								__r__4 = [(NSMutableString*)@"1|z:" stringByAppendingString:a]}break;
							default:{
								__r__4 = [[[(NSMutableString*)@"2|y:" stringByAppendingString:b] stringByAppendingString:(NSMutableString*)@",z:"] stringByAppendingString:c]}break;
						}
						return __r__4{
							
							NSMutableString* __r__4}
						}()}break;
					default:{
						__r__2 = ^(NSMutableString*)switch (c){
							case 2:{
								__r__5 = [(NSMutableString*)@"0|x:" stringByAppendingString:b]}break;
							default:{
								__r__5 = [[[(NSMutableString*)@"2|y:" stringByAppendingString:b] stringByAppendingString:(NSMutableString*)@",z:"] stringByAppendingString:c]}break;
						}
						return __r__5{
							
							NSMutableString* __r__5}
						}()}break;
				}
				return __r__2{
					
					NSMutableString* __r__2}
				}()}break;
			case 3:{
				__r__ = ^(NSMutableString*)switch (b){
					case 1:{
						__r__6 = ^(NSMutableString*)switch (c){
							case 2:{
								__r__7 = [(NSMutableString*)@"0|x:" stringByAppendingString:a]}break;
							case 4:{
								__r__7 = [(NSMutableString*)@"1|z:" stringByAppendingString:b]}break;
							default:{
								__r__7 = [[[[[(NSMutableString*)@"_:x:" stringByAppendingString:a] stringByAppendingString:(NSMutableString*)@",y:"] stringByAppendingString:b] stringByAppendingString:(NSMutableString*)@",z:"] stringByAppendingString:c]}break;
						}
						return __r__7{
							
							NSMutableString* __r__7}
						}()}break;
					case 4:{
						__r__6 = [(NSMutableString*)@"1|z:" stringByAppendingString:c]}break;
					case 3:{
						__r__6 = ^(NSMutableString*)switch (c){
							case 4:{
								__r__8 = [(NSMutableString*)@"1|z:" stringByAppendingString:a]}break;
							default:{
								__r__8 = [[[[[(NSMutableString*)@"_:x:" stringByAppendingString:a] stringByAppendingString:(NSMutableString*)@",y:"] stringByAppendingString:b] stringByAppendingString:(NSMutableString*)@",z:"] stringByAppendingString:c]}break;
						}
						return __r__8{
							
							NSMutableString* __r__8}
						}()}break;
					default:{
						__r__6 = ^(NSMutableString*)switch (c){
							case 4:{
								__r__9 = [(NSMutableString*)@"1|z:" stringByAppendingString:b]}break;
							default:{
								__r__9 = [[[[[(NSMutableString*)@"_:x:" stringByAppendingString:a] stringByAppendingString:(NSMutableString*)@",y:"] stringByAppendingString:b] stringByAppendingString:(NSMutableString*)@",z:"] stringByAppendingString:c]}break;
						}
						return __r__9{
							
							NSMutableString* __r__9}
						}()}break;
				}
				return __r__6{
					
					NSMutableString* __r__6}
				}()}break;
			case 2:{
				__r__ = ^(NSMutableString*)switch (b){
					case 1:{
						__r__10 = ^(NSMutableString*)switch (c){
							case 2:{
								__r__11 = [(NSMutableString*)@"0|x:" stringByAppendingString:a]}break;
							default:{
								__r__11 = [[[(NSMutableString*)@"2|y:" stringByAppendingString:c] stringByAppendingString:(NSMutableString*)@",z:"] stringByAppendingString:b]}break;
						}
						return __r__11{
							
							NSMutableString* __r__11}
						}()}break;
					case 3:{
						__r__10 = ^(NSMutableString*)switch (c){
							case 4:{
								__r__12 = [(NSMutableString*)@"1|z:" stringByAppendingString:a]}break;
							default:{
								__r__12 = [[[(NSMutableString*)@"2|y:" stringByAppendingString:c] stringByAppendingString:(NSMutableString*)@",z:"] stringByAppendingString:b]}break;
						}
						return __r__12{
							
							NSMutableString* __r__12}
						}()}break;
					default:{
						__r__10 = [[[(NSMutableString*)@"2|y:" stringByAppendingString:c] stringByAppendingString:(NSMutableString*)@",z:"] stringByAppendingString:b]}break;
				}
				return __r__10{
					
					NSMutableString* __r__10}
				}()}break;
			default:{
				__r__ = ^(NSMutableString*)switch (b){
					case 1:{
						__r__13 = ^(NSMutableString*)switch (c){
							case 2:{
								__r__14 = [(NSMutableString*)@"0|x:" stringByAppendingString:a]}break;
							default:{
								__r__14 = [[[[[(NSMutableString*)@"_:x:" stringByAppendingString:a] stringByAppendingString:(NSMutableString*)@",y:"] stringByAppendingString:b] stringByAppendingString:(NSMutableString*)@",z:"] stringByAppendingString:c]}break;
						}
						return __r__14{
							
							NSMutableString* __r__14}
						}()}break;
					case 3:{
						__r__13 = ^(NSMutableString*)switch (c){
							case 4:{
								__r__15 = [(NSMutableString*)@"1|z:" stringByAppendingString:a]}break;
							default:{
								__r__15 = [[[[[(NSMutableString*)@"_:x:" stringByAppendingString:a] stringByAppendingString:(NSMutableString*)@",y:"] stringByAppendingString:b] stringByAppendingString:(NSMutableString*)@",z:"] stringByAppendingString:c]}break;
						}
						return __r__15{
							
							NSMutableString* __r__15}
						}()}break;
					default:{
						__r__13 = [[[[[(NSMutableString*)@"_:x:" stringByAppendingString:a] stringByAppendingString:(NSMutableString*)@",y:"] stringByAppendingString:b] stringByAppendingString:(NSMutableString*)@",z:"] stringByAppendingString:c]}break;
				}
				return __r__13{
					
					NSMutableString* __r__13}
				}()}break;
		}
		return __r__{
			
			NSMutableString* __r__}
		}();
	}
	[self eq:(NSMutableString*)@"0|x:9" v2:[test:9 b:1 c:2] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"207",@"unit.TestMatch",@"testTuple",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"0|x:9" v2:[test:1 b:2 c:9] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"208",@"unit.TestMatch",@"testTuple",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"0|x:9" v2:[test:1 b:9 c:2] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"209",@"unit.TestMatch",@"testTuple",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"1|z:12" v2:[test:3 b:4 c:12] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"210",@"unit.TestMatch",@"testTuple",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"1|z:12" v2:[test:12 b:3 c:4] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"211",@"unit.TestMatch",@"testTuple",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"1|z:12" v2:[test:3 b:12 c:4] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"212",@"unit.TestMatch",@"testTuple",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"2|y:9,z:8" v2:[test:1 b:9 c:8] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"213",@"unit.TestMatch",@"testTuple",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"2|y:9,z:8" v2:[test:2 b:8 c:9] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"214",@"unit.TestMatch",@"testTuple",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"_:x:9,y:8,z:7" v2:[test:9 b:8 c:7] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"215",@"unit.TestMatch",@"testTuple",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testGrouping{
	SEL test = ^- (NSMutableString*) :(int)v{
		return ^(NSMutableString*)switch (v){
			case 1:case 2:case 3:{
				__r__ = (NSMutableString*)@"0"}break;
			case 4:{
				__r__ = ( (v == 5) ? (NSMutableString*)@"1" : (NSMutableString*)@"2")}break;
			case 5:{
				__r__ = ( (v == 5) ? (NSMutableString*)@"1" : (NSMutableString*)@"2")}break;
			case 6:{
				__r__ = ( (v == 5) ? (NSMutableString*)@"1" : (NSMutableString*)@"2")}break;
			case 8:case 9:{
				__r__ = (NSMutableString*)@"3"}break;
			default:{
				__r__ = [(NSMutableString*)@"_:" stringByAppendingString:v]}break;
		}
		return __r__{
			
			NSMutableString* __r__}
		}();
	}
	
	NSMutableArray *results = [[NSMutableArray alloc] initWithObjects:(NSMutableString*)@"_:0", (NSMutableString*)@"0", (NSMutableString*)@"0", (NSMutableString*)@"0", (NSMutableString*)@"2", (NSMutableString*)@"1", (NSMutableString*)@"2", (NSMutableString*)@"_:7", (NSMutableString*)@"3", (NSMutableString*)@"3", (NSMutableString*)@"_:10", nil];
	{
		int _g1 = 0; int _g = results.length;
		while (_g1 < _g) {
			int i = _g1++;
			[self eq:[results objectAtIndex:i] v2:[test:i] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"228",@"unit.TestMatch",@"testGrouping",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
		}
	}
}
- (void) testSubtyping{
	
	InitBase *c = [[InitBase alloc] init];
	
	NSMutableString *r = ((NSMutableString)($this:(snd ctx.path)) switch (c.s){
		case (NSMutableString*)@"foo":{
			__r__ = (NSMutableString*)@"s = foo"}break;
		default:{
			__r__ = (NSMutableString*)@"_"}break;
	}
	return __r__{
		
		NSMutableString* __r__}
	}(self));
	[self eq:(NSMutableString*)@"s = foo" v2:r pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"240",@"unit.TestMatch",@"testSubtyping",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"0" v2:[TestMatch switchStructure:struct {
	foo:(NSMutableString*)@"val1"; bar:(NSMutableString*)@"val2"
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"242",@"unit.TestMatch",@"testSubtyping",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"1" v2:[TestMatch switchStructure:struct {
	foo:(NSMutableString*)@"val1"; bar:(NSMutableString*)@"val1"
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"243",@"unit.TestMatch",@"testSubtyping",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"2" v2:[TestMatch switchStructure:struct {
	foo:(NSMutableString*)@"val2"; bar:(NSMutableString*)@"val2"
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"244",@"unit.TestMatch",@"testSubtyping",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"val1" v2:[TestMatch switchStructure:struct {
	foo:(NSMutableString*)@"val2"; bar:(NSMutableString*)@"val1"
	} structName] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"245",@"unit.TestMatch",@"testSubtyping",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testGadt{
	[self eq:(NSMutableString*)@"<=1" v2:[TestMatch toStringX:FEnum[ U1:1]] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"258",@"unit.TestMatch",@"testGadt",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@">1" v2:[TestMatch toStringX:FEnum[ U1:2]] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"259",@"unit.TestMatch",@"testGadt",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"U2" v2:[TestMatch toStringX: U2] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"260",@"unit.TestMatch",@"testGadt",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testClassSwitch{
	[self eq:(NSMutableString*)@"String" v2:[TestMatch switchClass:NSMutableString] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"264",@"unit.TestMatch",@"testClassSwitch",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"unit.MyClass" v2:[TestMatch switchClass:MyClass] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"265",@"unit.TestMatch",@"testClassSwitch",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"other: unit.TestMatch" v2:[TestMatch switchClass:TestMatch] pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"266",@"unit.TestMatch",@"testClassSwitch",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testNonExhaustiveness{
	[self eq:(NSMutableString*)@"Unmatched patterns: false" v2:(NSMutableString*)@"Unmatched patterns: false" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"270",@"unit.TestMatch",@"testNonExhaustiveness",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"Unmatched patterns: OpNegBits | OpNeg" v2:(NSMutableString*)@"Unmatched patterns: OpNegBits | OpNeg" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"273",@"unit.TestMatch",@"testNonExhaustiveness",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"Unmatched patterns: Node(Leaf(_),_)" v2:(NSMutableString*)@"Unmatched patterns: Node(Leaf(_),_)" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"278",@"unit.TestMatch",@"testNonExhaustiveness",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"Unmatched patterns: Leaf" v2:(NSMutableString*)@"Unmatched patterns: Leaf" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"282",@"unit.TestMatch",@"testNonExhaustiveness",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"Unmatched patterns: Leaf(_)" v2:(NSMutableString*)@"Unmatched patterns: Leaf(_)" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"286",@"unit.TestMatch",@"testNonExhaustiveness",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"Unmatched patterns: [_,false,_]" v2:(NSMutableString*)@"Unmatched patterns: [_,false,_]" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"290",@"unit.TestMatch",@"testNonExhaustiveness",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (void) testInvalidBinding{
	[self eq:(NSMutableString*)@"Variable y must appear exactly once in each sub-pattern" v2:(NSMutableString*)@"Variable y must appear exactly once in each sub-pattern" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"296",@"unit.TestMatch",@"testInvalidBinding",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"Variable y must appear exactly once in each sub-pattern" v2:(NSMutableString*)@"Variable y must appear exactly once in each sub-pattern" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"299",@"unit.TestMatch",@"testInvalidBinding",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"Variable x must appear exactly once in each sub-pattern" v2:(NSMutableString*)@"Variable x must appear exactly once in each sub-pattern" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"302",@"unit.TestMatch",@"testInvalidBinding",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"Variable l must appear exactly once in each sub-pattern" v2:(NSMutableString*)@"Variable l must appear exactly once in each sub-pattern" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"305",@"unit.TestMatch",@"testInvalidBinding",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"Variable l must appear exactly once in each sub-pattern" v2:(NSMutableString*)@"Variable l must appear exactly once in each sub-pattern" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"308",@"unit.TestMatch",@"testInvalidBinding",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
	[self eq:(NSMutableString*)@"String should be unit.Tree<String>" v2:(NSMutableString*)@"String should be unit.Tree<String>" pos:[NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:@"TestMatch.hx",@"311",@"unit.TestMatch",@"testInvalidBinding",nil] forKeys:[NSArray arrayWithObjects:@"fileName",@"lineNumber",@"className",@"methodName",nil]]];
}
- (id) init{
	self = [super init];
	[super];
	return self;
}

@end
