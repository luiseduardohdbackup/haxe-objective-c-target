/* * Copyright (c) 2005, The haXe Project Contributors * All rights reserved. * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are met: * *   - Redistributions of source code must retain the above copyright *     notice, this list of conditions and the following disclaimer. *   - Redistributions in binary form must reproduce the above copyright *     notice, this list of conditions and the following disclaimer in the *     documentation and/or other materials provided with the distribution. * * THIS SOFTWARE IS PROVIDED BY THE HAXE PROJECT CONTRIBUTORS "AS IS" AND ANY * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE * DISCLAIMED. IN NO EVENT SHALL THE HAXE PROJECT CONTRIBUTORS BE LIABLE FOR * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH * DAMAGE. */import NSArray;/*@:core_api @:final */class Array<T> {	private var __a : NSMutableArray;	public var length (default, null) : Int;	public function new() : Void {		this.__a = untyped __objc__("[[NSMutableArray alloc] init]");	}	public function initWithNSMutableArray (array:NSMutableArray) :Array<T> {		this.__a = untyped __objc__("[NSMutableArray arrayWithArray:array]");		return this;	}	public function concat( a : Array<T>) : Array<T> {		return a;	}	public function copy() : Array<T> {		return new Array<T>().initWithNSMutableArray ( __a );	}	public function iterator() : Iterator<T> {		return null;/*untyped {					a : this,					p : 0,					hasNext : function() {						return __this__.p < __this__.a.length;					},					next : function() {						var i = __this__.a.__a[__this__.p];						__this__.p += 1;						return i;					}				};*/	}	public function insert( pos : Int, x : T ) : Void {		untyped __objc__("[__a insertObject:x atIndex:pos]");	}	public function join( sep : String ) : String {		return untyped __objc__("[__a componentsJoinedByString:sep]");	}	public function toString() : String {		return "[" + (untyped __objc__("[__a componentsJoinedByString:@\",\"]")) + "]";	}	public function pop() : Null<T> {/*		if( this.length == 0 )			return null;		this.length -= 1;		var x = this.__a[this.length];		this.__a[this.length] = null;		return x;*/		return null;	}	public function push(x:T) : Int {		untyped __objc__("[__a addObject:x]");		return getLength();	}	public function unshift(x : T) : Void {		untyped __objc__("[__a insertObject:x atIndex:pos]");	}	public function remove(x : T) : Bool {		untyped __objc__("[__a removeObject:x]");		return true;	}	public function reverse() : Void {			}	public function shift() : Null<T> {				return null;	}	public function slice( pos : Int, ?end : Int ) : Array<T> {				return null;	}	public function sort(f:T->T->Int) : Void {			}	public function splice( pos : Int, len : Int ) : Array<T> {		return null;	}		public function getLength () :Int {		return untyped __objc__("[__a count]");	}}