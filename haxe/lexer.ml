# 20 "lexer.mll"
 
open Lexing
open Ast

type error_msg =
	| Invalid_character of char
	| Unterminated_string
	| Unterminated_regexp
	| Unclosed_comment
	| Invalid_escape
	| Invalid_option

exception Error of error_msg * pos

let error_msg = function
	| Invalid_character c when int_of_char c > 32 && int_of_char c < 128 -> Printf.sprintf "Invalid character '%c'" c
	| Invalid_character c -> Printf.sprintf "Invalid character 0x%.2X" (int_of_char c)
	| Unterminated_string -> "Unterminated string"
	| Unterminated_regexp -> "Unterminated regular expression"
	| Unclosed_comment -> "Unclosed comment"
	| Invalid_escape -> "Invalid escape sequence"
	| Invalid_option -> "Invalid regular expression option"

type lexer_file = {
	lfile : string;
	mutable lline : int;
	mutable lmaxline : int;
	mutable llines : (int * int) list;
	mutable lalines : (int * int) array;
	mutable lstrings : int list;
}

let make_file file =
	{
		lfile = file;
		lline = 1;
		lmaxline = 1;
		llines = [0,1];
		lalines = [|0,1|];
		lstrings = [];
	}


let cur = ref (make_file "")

let all_files = Hashtbl.create 0

let buf = Buffer.create 100

let error e pos =
	raise (Error (e,{ pmin = pos; pmax = pos; pfile = !cur.lfile }))

let keywords =
	let h = Hashtbl.create 3 in
	List.iter (fun k -> Hashtbl.add h (s_keyword k) k)
		[Function;Class;Static;Var;If;Else;While;Do;For;
		Break;Return;Continue;Extends;Implements;Import;
		Switch;Case;Default;Public;Private;Try;Untyped;
		Catch;New;This;Throw;Extern;Enum;In;Interface;
		Cast;Override;Dynamic;Typedef;Package;
		Inline;Using;Null;True;False;Abstract;Macro];
	h

let init file =
	let f = make_file file in
	cur := f;
	Hashtbl.replace all_files file f

let save() =
	!cur

let restore c =
	cur := c

let newline lexbuf =
	let cur = !cur in
	cur.lline <- cur.lline + 1;
	cur.llines <- (lexeme_end lexbuf,cur.lline) :: cur.llines

let fmt_pos p =
	p.pmin + (p.pmax - p.pmin) * 1000000

let add_fmt_string p =
	let file = (try
		Hashtbl.find all_files p.pfile
	with Not_found ->
		let f = make_file p.pfile in
		Hashtbl.replace all_files p.pfile f;
		f
	) in
	file.lstrings <- (fmt_pos p) :: file.lstrings

let fast_add_fmt_string p =
	let cur = !cur in
	cur.lstrings <- (fmt_pos p) :: cur.lstrings

let is_fmt_string p =
	try
		let file = Hashtbl.find all_files p.pfile in
		List.mem (fmt_pos p) file.lstrings
	with Not_found ->
		false

let remove_fmt_string p =
	try
		let file = Hashtbl.find all_files p.pfile in
		file.lstrings <- List.filter ((<>) (fmt_pos p)) file.lstrings
	with Not_found ->
		()

let find_line p f =
	(* rebuild cache if we have a new line *)
	if f.lmaxline <> f.lline then begin
		f.lmaxline <- f.lline;
		f.lalines <- Array.of_list (List.rev f.llines);
	end;
	let rec loop min max =
		let med = (min + max) lsr 1 in
		let lp, line = Array.unsafe_get f.lalines med in
		if med = min then
			line, p - lp
		else if lp > p then
			loop min med
		else
			loop med max
	in
	loop 0 (Array.length f.lalines)

let find_pos p =
	let file = (try Hashtbl.find all_files p.pfile with Not_found -> make_file p.pfile) in
	find_line p.pmin file

let get_error_line p =
	let l, _ = find_pos p in
	l

let get_error_pos printer p =
	if p.pmin = -1 then
		"(unknown)"
	else
		let file = (try Hashtbl.find all_files p.pfile with Not_found -> make_file p.pfile) in
		let l1, p1 = find_line p.pmin file in
		let l2, p2 = find_line p.pmax file in
		if l1 = l2 then begin
			let s = (if p1 = p2 then Printf.sprintf " %d" p1 else Printf.sprintf "s %d-%d" p1 p2) in
			Printf.sprintf "%s character%s" (printer p.pfile l1) s
		end else
			Printf.sprintf "%s lines %d-%d" (printer p.pfile l1) l1 l2

let reset() = Buffer.reset buf
let contents() = Buffer.contents buf
let store lexbuf = Buffer.add_string buf (lexeme lexbuf)
let add c = Buffer.add_string buf c

let mk_tok t pmin pmax =
	t , { pfile = !cur.lfile; pmin = pmin; pmax = pmax }

let mk lexbuf t =
	mk_tok t (lexeme_start lexbuf) (lexeme_end lexbuf)

let mk_ident lexbuf =
	let s = lexeme lexbuf in
	mk lexbuf (try Kwd (Hashtbl.find keywords s) with Not_found -> Const (Ident s))

let invalid_char lexbuf =
	error (Invalid_character (lexeme_char lexbuf 0)) (lexeme_start lexbuf)


# 171 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\253\255\000\000\000\000\000\000\255\255\001\000\006\000\
    \191\255\095\000\198\000\017\001\092\001\120\001\197\255\198\255\
    \200\255\201\255\202\255\203\255\204\255\205\255\206\255\207\255\
    \218\255\219\255\220\255\221\255\037\000\041\000\073\000\074\000\
    \075\000\094\000\181\000\076\000\091\000\095\000\098\000\179\000\
    \179\000\197\001\219\001\252\255\000\000\000\000\255\255\253\255\
    \251\001\017\002\039\002\077\002\093\000\105\002\115\002\207\001\
    \229\001\245\255\005\002\137\002\096\000\147\002\224\255\199\255\
    \233\255\098\001\236\255\243\255\225\255\235\255\242\255\196\255\
    \240\255\228\255\239\255\227\255\238\255\237\255\234\255\229\255\
    \092\000\232\255\231\255\230\255\157\002\232\002\051\003\126\003\
    \068\002\069\002\107\000\002\000\254\255\255\255\253\255\239\003\
    \240\003\250\255\152\000\003\000\254\255\255\255\252\255\253\255\
    \241\003\245\003\250\255\149\000\007\000\254\255\255\255\251\255\
    \252\255\175\003\246\003\246\255\000\004\255\255\247\255\079\004\
    \249\255\250\255\251\255\252\255\253\255\254\255\102\004\160\004\
    \215\004\248\255\193\002\254\255\255\255";
  Lexing.lex_backtrk = 
   "\002\000\255\255\255\255\255\255\255\255\255\255\001\000\255\255\
    \255\255\063\000\062\000\062\000\061\000\064\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\032\000\047\000\033\000\044\000\
    \042\000\041\000\040\000\039\000\014\000\046\000\043\000\045\000\
    \038\000\005\000\005\000\255\255\003\000\001\000\255\255\255\255\
    \255\255\255\255\255\255\004\000\255\255\255\255\006\000\009\000\
    \255\255\255\255\008\000\255\255\255\255\007\000\255\255\255\255\
    \255\255\011\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \029\000\255\255\255\255\255\255\060\000\060\000\060\000\062\000\
    \255\255\004\000\003\000\001\000\255\255\255\255\255\255\255\255\
    \006\000\255\255\004\000\001\000\255\255\255\255\255\255\255\255\
    \255\255\006\000\255\255\002\000\001\000\255\255\255\255\255\255\
    \255\255\255\255\010\000\255\255\255\255\255\255\255\255\008\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\002\000\255\255\255\255";
  Lexing.lex_default = 
   "\255\255\000\000\255\255\255\255\255\255\000\000\006\000\008\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\065\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \089\000\089\000\255\255\255\255\000\000\000\000\000\000\096\000\
    \096\000\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \105\000\105\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\114\000\114\000\000\000\118\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\000\000\255\255\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\045\000\047\000\255\255\092\000\100\000\255\255\045\000\
    \043\000\109\000\000\000\044\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \045\000\006\000\000\000\002\000\000\000\000\000\045\000\028\000\
    \015\000\013\000\012\000\035\000\034\000\014\000\019\000\018\000\
    \031\000\038\000\024\000\037\000\040\000\039\000\042\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \025\000\026\000\030\000\029\000\027\000\017\000\016\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\023\000\083\000\022\000\032\000\011\000\082\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\021\000\033\000\020\000\036\000\080\000\079\000\078\000\
    \077\000\072\000\071\000\057\000\070\000\067\000\062\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\081\000\094\000\076\000\069\000\068\000\000\000\066\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\103\000\004\000\111\000\000\000\009\000\005\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\075\000\073\000\000\000\063\000\000\000\000\000\
    \000\000\060\000\065\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\000\000\000\000\003\000\
    \064\000\112\000\074\000\000\000\102\000\000\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \001\000\255\255\000\000\000\000\000\000\000\000\046\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\000\000\000\000\000\000\000\000\010\000\000\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\255\255\000\000\000\000\255\255\
    \011\000\000\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\000\000\
    \000\000\000\000\000\000\012\000\000\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\085\000\
    \000\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\049\000\000\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\049\000\048\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\000\000\
    \048\000\000\000\000\000\000\000\000\000\000\000\059\000\000\000\
    \059\000\000\000\048\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\052\000\
    \048\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\000\000\000\000\000\000\092\000\255\255\
    \000\000\091\000\255\255\050\000\000\000\000\000\053\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\090\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\053\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\000\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\056\000\000\000\056\000\000\000\
    \000\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\000\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\000\000\000\000\000\000\000\000\
    \053\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\000\000\
    \053\000\000\000\000\000\000\000\000\000\000\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \000\000\000\000\000\000\000\000\084\000\000\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\131\000\131\000\131\000\131\000\131\000\131\000\
    \132\000\131\000\132\000\131\000\131\000\131\000\132\000\131\000\
    \131\000\131\000\131\000\131\000\132\000\131\000\132\000\131\000\
    \131\000\131\000\131\000\131\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\093\000\255\255\000\000\085\000\
    \000\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\000\000\000\000\
    \000\000\000\000\086\000\000\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \000\000\117\000\000\000\000\000\117\000\000\000\000\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\000\000\000\000\000\000\000\000\087\000\115\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\100\000\255\255\109\000\099\000\255\255\108\000\255\255\
    \255\255\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\116\000\000\000\000\000\000\000\000\000\
    \000\000\097\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \106\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\121\000\255\255\000\000\000\000\
    \121\000\121\000\121\000\121\000\000\000\121\000\121\000\125\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\000\000\000\000\000\000\000\000\000\000\121\000\
    \000\000\000\000\120\000\000\000\120\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\098\000\255\255\107\000\000\000\000\000\
    \000\000\255\255\255\255\120\000\000\000\119\000\000\000\120\000\
    \000\000\000\000\000\000\121\000\121\000\121\000\121\000\000\000\
    \000\000\000\000\120\000\000\000\120\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\123\000\000\000\
    \000\000\000\000\124\000\120\000\122\000\119\000\000\000\120\000\
    \120\000\000\000\000\000\121\000\121\000\121\000\000\000\126\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \126\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\000\000\000\000\117\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\000\000\000\000\000\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\128\000\128\000\128\000\128\000\128\000\128\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\101\000\
    \255\255\110\000\000\000\000\000\000\000\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\128\000\128\000\128\000\128\000\128\000\128\000\129\000\
    \129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\
    \129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \129\000\129\000\129\000\129\000\129\000\129\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \129\000\129\000\129\000\129\000\129\000\129\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\045\000\044\000\006\000\091\000\099\000\006\000\007\000\
    \007\000\108\000\255\255\007\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \045\000\002\000\255\255\000\000\255\255\255\255\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\028\000\007\000\007\000\007\000\029\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\030\000\030\000\031\000\
    \032\000\035\000\036\000\052\000\037\000\038\000\060\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\080\000\090\000\033\000\037\000\037\000\255\255\038\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\098\000\003\000\107\000\255\255\009\000\004\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\033\000\034\000\255\255\039\000\255\255\255\255\
    \255\255\040\000\039\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\255\255\255\255\000\000\
    \039\000\107\000\034\000\255\255\098\000\255\255\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \000\000\006\000\255\255\255\255\255\255\255\255\007\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\255\255\255\255\255\255\255\255\010\000\255\255\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\065\000\255\255\255\255\065\000\
    \011\000\255\255\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\255\255\
    \255\255\255\255\255\255\012\000\255\255\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\013\000\
    \255\255\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\041\000\255\255\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\042\000\041\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\255\255\
    \042\000\255\255\255\255\255\255\255\255\255\255\048\000\255\255\
    \048\000\255\255\041\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\049\000\
    \042\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\255\255\255\255\255\255\088\000\089\000\
    \255\255\088\000\089\000\042\000\255\255\255\255\049\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\255\255\065\000\255\255\255\255\255\255\255\255\255\255\
    \050\000\050\000\050\000\050\000\050\000\050\000\088\000\089\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\049\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\255\255\
    \050\000\050\000\050\000\050\000\050\000\050\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\053\000\255\255\053\000\255\255\
    \255\255\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\255\255\051\000\051\000\
    \051\000\051\000\051\000\051\000\255\255\255\255\255\255\255\255\
    \054\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\255\255\
    \054\000\255\255\255\255\255\255\255\255\255\255\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \255\255\255\255\255\255\255\255\084\000\255\255\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\088\000\089\000\255\255\085\000\
    \255\255\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\255\255\255\255\
    \255\255\255\255\086\000\255\255\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \255\255\113\000\255\255\255\255\113\000\255\255\255\255\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\255\255\255\255\255\255\255\255\087\000\113\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\095\000\096\000\104\000\095\000\096\000\104\000\105\000\
    \114\000\255\255\105\000\114\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\113\000\255\255\255\255\255\255\255\255\
    \255\255\095\000\096\000\255\255\255\255\255\255\255\255\255\255\
    \104\000\255\255\255\255\255\255\105\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\116\000\114\000\255\255\255\255\
    \116\000\116\000\116\000\116\000\255\255\116\000\116\000\116\000\
    \116\000\116\000\116\000\116\000\116\000\116\000\116\000\116\000\
    \116\000\116\000\255\255\255\255\255\255\255\255\255\255\116\000\
    \255\255\255\255\116\000\255\255\116\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\095\000\096\000\104\000\255\255\255\255\
    \255\255\105\000\114\000\116\000\255\255\116\000\255\255\116\000\
    \255\255\255\255\255\255\116\000\116\000\116\000\116\000\255\255\
    \255\255\255\255\116\000\255\255\116\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\116\000\255\255\
    \255\255\255\255\116\000\116\000\116\000\116\000\255\255\116\000\
    \116\000\255\255\255\255\116\000\116\000\116\000\255\255\119\000\
    \119\000\119\000\119\000\119\000\119\000\119\000\119\000\119\000\
    \119\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \119\000\119\000\119\000\119\000\119\000\119\000\126\000\126\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\126\000\
    \126\000\126\000\126\000\126\000\126\000\255\255\255\255\113\000\
    \119\000\119\000\119\000\119\000\119\000\119\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\126\000\
    \126\000\126\000\126\000\126\000\126\000\255\255\255\255\255\255\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\127\000\127\000\127\000\127\000\127\000\127\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\095\000\
    \096\000\104\000\255\255\255\255\255\255\105\000\114\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \116\000\127\000\127\000\127\000\127\000\127\000\127\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \128\000\128\000\128\000\128\000\128\000\128\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \128\000\128\000\128\000\128\000\128\000\128\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec skip_header lexbuf =
  __ocaml_lex_skip_header_rec lexbuf 0
and __ocaml_lex_skip_header_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 193 "lexer.mll"
                  ( skip_header lexbuf )
# 626 "lexer.ml"

  | 1 ->
# 194 "lexer.mll"
                      ( skip_header lexbuf )
# 631 "lexer.ml"

  | 2 ->
# 195 "lexer.mll"
            ( )
# 636 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_skip_header_rec lexbuf __ocaml_lex_state

and token lexbuf =
  __ocaml_lex_token_rec lexbuf 7
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 198 "lexer.mll"
       ( mk lexbuf Eof )
# 647 "lexer.ml"

  | 1 ->
# 199 "lexer.mll"
               ( token lexbuf )
# 652 "lexer.ml"

  | 2 ->
# 200 "lexer.mll"
          ( newline lexbuf; token lexbuf )
# 657 "lexer.ml"

  | 3 ->
# 201 "lexer.mll"
               ( newline lexbuf; token lexbuf )
# 662 "lexer.ml"

  | 4 ->
# 202 "lexer.mll"
                                   ( mk lexbuf (Const (Int (lexeme lexbuf))) )
# 667 "lexer.ml"

  | 5 ->
# 203 "lexer.mll"
              ( mk lexbuf (Const (Int (lexeme lexbuf))) )
# 672 "lexer.ml"

  | 6 ->
# 204 "lexer.mll"
                             ( mk lexbuf (Const (Float (lexeme lexbuf))) )
# 677 "lexer.ml"

  | 7 ->
# 205 "lexer.mll"
                  ( mk lexbuf (Const (Float (lexeme lexbuf))) )
# 682 "lexer.ml"

  | 8 ->
# 206 "lexer.mll"
                                              ( mk lexbuf (Const (Float (lexeme lexbuf))) )
# 687 "lexer.ml"

  | 9 ->
# 207 "lexer.mll"
                                                             ( mk lexbuf (Const (Float (lexeme lexbuf))) )
# 692 "lexer.ml"

  | 10 ->
# 208 "lexer.mll"
                    (
			let s = lexeme lexbuf in
			mk lexbuf (IntInterval (String.sub s 0 (String.length s - 3)))
		)
# 700 "lexer.ml"

  | 11 ->
# 212 "lexer.mll"
                       (
			let s = lexeme lexbuf in
			mk lexbuf (CommentLine (String.sub s 2 ((String.length s)-2)))
		)
# 708 "lexer.ml"

  | 12 ->
# 216 "lexer.mll"
        ( mk lexbuf (Unop Increment) )
# 713 "lexer.ml"

  | 13 ->
# 217 "lexer.mll"
        ( mk lexbuf (Unop Decrement) )
# 718 "lexer.ml"

  | 14 ->
# 218 "lexer.mll"
        ( mk lexbuf (Unop NegBits) )
# 723 "lexer.ml"

  | 15 ->
# 219 "lexer.mll"
        ( mk lexbuf (Binop (OpAssignOp OpMod)) )
# 728 "lexer.ml"

  | 16 ->
# 220 "lexer.mll"
        ( mk lexbuf (Binop (OpAssignOp OpAnd)) )
# 733 "lexer.ml"

  | 17 ->
# 221 "lexer.mll"
        ( mk lexbuf (Binop (OpAssignOp OpOr)) )
# 738 "lexer.ml"

  | 18 ->
# 222 "lexer.mll"
        ( mk lexbuf (Binop (OpAssignOp OpXor)) )
# 743 "lexer.ml"

  | 19 ->
# 223 "lexer.mll"
        ( mk lexbuf (Binop (OpAssignOp OpAdd)) )
# 748 "lexer.ml"

  | 20 ->
# 224 "lexer.mll"
        ( mk lexbuf (Binop (OpAssignOp OpSub)) )
# 753 "lexer.ml"

  | 21 ->
# 225 "lexer.mll"
        ( mk lexbuf (Binop (OpAssignOp OpMult)) )
# 758 "lexer.ml"

  | 22 ->
# 226 "lexer.mll"
        ( mk lexbuf (Binop (OpAssignOp OpDiv)) )
# 763 "lexer.ml"

  | 23 ->
# 227 "lexer.mll"
         ( mk lexbuf (Binop (OpAssignOp OpShl)) )
# 768 "lexer.ml"

  | 24 ->
# 230 "lexer.mll"
        ( mk lexbuf (Binop OpEq) )
# 773 "lexer.ml"

  | 25 ->
# 231 "lexer.mll"
        ( mk lexbuf (Binop OpNotEq) )
# 778 "lexer.ml"

  | 26 ->
# 232 "lexer.mll"
        ( mk lexbuf (Binop OpLte) )
# 783 "lexer.ml"

  | 27 ->
# 234 "lexer.mll"
        ( mk lexbuf (Binop OpBoolAnd) )
# 788 "lexer.ml"

  | 28 ->
# 235 "lexer.mll"
        ( mk lexbuf (Binop OpBoolOr) )
# 793 "lexer.ml"

  | 29 ->
# 236 "lexer.mll"
        ( mk lexbuf (Binop OpShl) )
# 798 "lexer.ml"

  | 30 ->
# 237 "lexer.mll"
        ( mk lexbuf Arrow )
# 803 "lexer.ml"

  | 31 ->
# 238 "lexer.mll"
         ( mk lexbuf (Binop OpInterval) )
# 808 "lexer.ml"

  | 32 ->
# 239 "lexer.mll"
       ( mk lexbuf (Unop Not) )
# 813 "lexer.ml"

  | 33 ->
# 240 "lexer.mll"
       ( mk lexbuf (Binop OpLt) )
# 818 "lexer.ml"

  | 34 ->
# 241 "lexer.mll"
       ( mk lexbuf (Binop OpGt) )
# 823 "lexer.ml"

  | 35 ->
# 242 "lexer.mll"
       ( mk lexbuf Semicolon )
# 828 "lexer.ml"

  | 36 ->
# 243 "lexer.mll"
       ( mk lexbuf DblDot )
# 833 "lexer.ml"

  | 37 ->
# 244 "lexer.mll"
       ( mk lexbuf Comma )
# 838 "lexer.ml"

  | 38 ->
# 245 "lexer.mll"
       ( mk lexbuf Dot )
# 843 "lexer.ml"

  | 39 ->
# 246 "lexer.mll"
       ( mk lexbuf (Binop OpMod) )
# 848 "lexer.ml"

  | 40 ->
# 247 "lexer.mll"
       ( mk lexbuf (Binop OpAnd) )
# 853 "lexer.ml"

  | 41 ->
# 248 "lexer.mll"
       ( mk lexbuf (Binop OpOr) )
# 858 "lexer.ml"

  | 42 ->
# 249 "lexer.mll"
       ( mk lexbuf (Binop OpXor) )
# 863 "lexer.ml"

  | 43 ->
# 250 "lexer.mll"
       ( mk lexbuf (Binop OpAdd) )
# 868 "lexer.ml"

  | 44 ->
# 251 "lexer.mll"
       ( mk lexbuf (Binop OpMult) )
# 873 "lexer.ml"

  | 45 ->
# 252 "lexer.mll"
       ( mk lexbuf (Binop OpDiv) )
# 878 "lexer.ml"

  | 46 ->
# 253 "lexer.mll"
       ( mk lexbuf (Binop OpSub) )
# 883 "lexer.ml"

  | 47 ->
# 254 "lexer.mll"
       ( mk lexbuf (Binop OpAssign) )
# 888 "lexer.ml"

  | 48 ->
# 255 "lexer.mll"
       ( mk lexbuf BkOpen )
# 893 "lexer.ml"

  | 49 ->
# 256 "lexer.mll"
       ( mk lexbuf BkClose )
# 898 "lexer.ml"

  | 50 ->
# 257 "lexer.mll"
       ( mk lexbuf BrOpen )
# 903 "lexer.ml"

  | 51 ->
# 258 "lexer.mll"
       ( mk lexbuf BrClose )
# 908 "lexer.ml"

  | 52 ->
# 259 "lexer.mll"
       ( mk lexbuf POpen )
# 913 "lexer.ml"

  | 53 ->
# 260 "lexer.mll"
       ( mk lexbuf PClose )
# 918 "lexer.ml"

  | 54 ->
# 261 "lexer.mll"
       ( mk lexbuf Question )
# 923 "lexer.ml"

  | 55 ->
# 262 "lexer.mll"
       ( mk lexbuf At )
# 928 "lexer.ml"

  | 56 ->
# 263 "lexer.mll"
        (
			reset();
			let pmin = lexeme_start lexbuf in
			let pmax = (try comment lexbuf with Exit -> error Unclosed_comment pmin) in
			mk_tok (Comment (contents())) pmin pmax;
		)
# 938 "lexer.ml"

  | 57 ->
# 269 "lexer.mll"
       (
			reset();
			let pmin = lexeme_start lexbuf in
			let pmax = (try string lexbuf with Exit -> error Unterminated_string pmin) in
			let str = (try unescape (contents()) with Exit -> error Invalid_escape pmin) in
			mk_tok (Const (String str)) pmin pmax;
		)
# 949 "lexer.ml"

  | 58 ->
# 276 "lexer.mll"
       (
			reset();
			let pmin = lexeme_start lexbuf in
			let pmax = (try string2 lexbuf with Exit -> error Unterminated_string pmin) in
			let str = (try unescape (contents()) with Exit -> error Invalid_escape pmin) in
			let t = mk_tok (Const (String str)) pmin pmax in
			fast_add_fmt_string (snd t);
			t
		)
# 962 "lexer.ml"

  | 59 ->
# 285 "lexer.mll"
        (
			reset();
			let pmin = lexeme_start lexbuf in
			let options, pmax = (try regexp lexbuf with Exit -> error Unterminated_regexp pmin) in
			let str = contents() in
			mk_tok (Const (Regexp (str,options))) pmin pmax;
		)
# 973 "lexer.ml"

  | 60 ->
# 292 "lexer.mll"
             (
			let v = lexeme lexbuf in
			let v = String.sub v 1 (String.length v - 1) in
			mk lexbuf (Sharp v)
		)
# 982 "lexer.ml"

  | 61 ->
# 297 "lexer.mll"
                                      (
			let v = lexeme lexbuf in
			let v = String.sub v 1 (String.length v - 1) in
			mk lexbuf (Dollar v)
		)
# 991 "lexer.ml"

  | 62 ->
# 302 "lexer.mll"
         ( mk_ident lexbuf )
# 996 "lexer.ml"

  | 63 ->
# 303 "lexer.mll"
          ( mk lexbuf (Const (Ident (lexeme lexbuf))) )
# 1001 "lexer.ml"

  | 64 ->
# 304 "lexer.mll"
     ( invalid_char lexbuf )
# 1006 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
  __ocaml_lex_comment_rec lexbuf 88
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 307 "lexer.mll"
       ( raise Exit )
# 1017 "lexer.ml"

  | 1 ->
# 308 "lexer.mll"
                        ( newline lexbuf; store lexbuf; comment lexbuf )
# 1022 "lexer.ml"

  | 2 ->
# 309 "lexer.mll"
        ( lexeme_end lexbuf )
# 1027 "lexer.ml"

  | 3 ->
# 310 "lexer.mll"
       ( store lexbuf; comment lexbuf )
# 1032 "lexer.ml"

  | 4 ->
# 311 "lexer.mll"
                     ( store lexbuf; comment lexbuf )
# 1037 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and string lexbuf =
  __ocaml_lex_string_rec lexbuf 95
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 314 "lexer.mll"
       ( raise Exit )
# 1048 "lexer.ml"

  | 1 ->
# 315 "lexer.mll"
                        ( newline lexbuf; store lexbuf; string lexbuf )
# 1053 "lexer.ml"

  | 2 ->
# 316 "lexer.mll"
          ( store lexbuf; string lexbuf )
# 1058 "lexer.ml"

  | 3 ->
# 317 "lexer.mll"
          ( store lexbuf; string lexbuf )
# 1063 "lexer.ml"

  | 4 ->
# 318 "lexer.mll"
        ( store lexbuf; string lexbuf )
# 1068 "lexer.ml"

  | 5 ->
# 319 "lexer.mll"
       ( lexeme_end lexbuf )
# 1073 "lexer.ml"

  | 6 ->
# 320 "lexer.mll"
                          ( store lexbuf; string lexbuf )
# 1078 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_string_rec lexbuf __ocaml_lex_state

and string2 lexbuf =
  __ocaml_lex_string2_rec lexbuf 104
and __ocaml_lex_string2_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 323 "lexer.mll"
       ( raise Exit )
# 1089 "lexer.ml"

  | 1 ->
# 324 "lexer.mll"
                        ( newline lexbuf; store lexbuf; string2 lexbuf )
# 1094 "lexer.ml"

  | 2 ->
# 325 "lexer.mll"
        ( store lexbuf; string2 lexbuf )
# 1099 "lexer.ml"

  | 3 ->
# 326 "lexer.mll"
          ( store lexbuf; string2 lexbuf )
# 1104 "lexer.ml"

  | 4 ->
# 327 "lexer.mll"
         ( store lexbuf; string2 lexbuf )
# 1109 "lexer.ml"

  | 5 ->
# 328 "lexer.mll"
       ( lexeme_end lexbuf )
# 1114 "lexer.ml"

  | 6 ->
# 329 "lexer.mll"
                           ( store lexbuf; string2 lexbuf )
# 1119 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_string2_rec lexbuf __ocaml_lex_state

and regexp lexbuf =
  __ocaml_lex_regexp_rec lexbuf 113
and __ocaml_lex_regexp_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 332 "lexer.mll"
                     ( raise Exit )
# 1130 "lexer.ml"

  | 1 ->
# 333 "lexer.mll"
            ( add "/"; regexp lexbuf )
# 1135 "lexer.ml"

  | 2 ->
# 334 "lexer.mll"
            ( add "\r"; regexp lexbuf )
# 1140 "lexer.ml"

  | 3 ->
# 335 "lexer.mll"
            ( add "\n"; regexp lexbuf )
# 1145 "lexer.ml"

  | 4 ->
# 336 "lexer.mll"
            ( add "\t"; regexp lexbuf )
# 1150 "lexer.ml"

  | 5 ->
# 337 "lexer.mll"
                                                                               ( add (lexeme lexbuf); regexp lexbuf )
# 1155 "lexer.ml"

  | 6 ->
# 338 "lexer.mll"
                                              ( add (lexeme lexbuf); regexp lexbuf )
# 1160 "lexer.ml"

  | 7 ->
# 339 "lexer.mll"
                                                                                                                          ( add (lexeme lexbuf); regexp lexbuf )
# 1165 "lexer.ml"

  | 8 ->
# 340 "lexer.mll"
                 ( error (Invalid_character (lexeme lexbuf).[1]) (lexeme_end lexbuf - 1) )
# 1170 "lexer.ml"

  | 9 ->
# 341 "lexer.mll"
       ( regexp_options lexbuf, lexeme_end lexbuf )
# 1175 "lexer.ml"

  | 10 ->
# 342 "lexer.mll"
                           ( store lexbuf; regexp lexbuf )
# 1180 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_regexp_rec lexbuf __ocaml_lex_state

and regexp_options lexbuf =
  __ocaml_lex_regexp_options_rec lexbuf 130
and __ocaml_lex_regexp_options_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 345 "lexer.mll"
                               (
			let l = lexeme lexbuf in
			l ^ regexp_options lexbuf
		)
# 1194 "lexer.ml"

  | 1 ->
# 349 "lexer.mll"
               ( error Invalid_option (lexeme_start lexbuf) )
# 1199 "lexer.ml"

  | 2 ->
# 350 "lexer.mll"
      ( "" )
# 1204 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_regexp_options_rec lexbuf __ocaml_lex_state

;;

